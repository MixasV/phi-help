import os
import json
import random
import re
from typing import Dict, List, Optional
from dataclasses import dataclass
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
from phi_api import PHIAPI
from data_utils import DataManager
from background_checker import BackgroundChecker

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

@dataclass
class UserData:
    wallet_addresses: List[str]
    board_addresses: List[str]
    completed_followers_tasks: int = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ —Ñ–æ–ª–ª–æ–≤–µ—Ä–∞–º
    completed_token_tasks: int = 0      # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ —Ç–æ–∫–µ–Ω–∞–º

class PHIBot:
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN')
        self.wallets_file = os.getenv('WALLETS_FILE', 'wallets.txt')
        self.boards_file = os.getenv('BOARDS_FILE', 'boards.txt')
        self.tokens_file = os.getenv('TOKENS_FILE', 'tokens.txt')
        self.users_data_file = os.getenv('USERS_DATA_FILE', 'users_data.json')
        self.followers_threshold = int(os.getenv('FOLLOWERS_THRESHOLD', '10'))
        self.token_holders_threshold = int(os.getenv('TOKEN_HOLDERS_THRESHOLD', '10'))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –∫–ª–∏–µ–Ω—Ç –∏ –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        self.api_client = PHIAPI()
        self.data_manager = DataManager(self.wallets_file, self.boards_file, self.tokens_file)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.background_checker = None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.users_data = self.load_users_data()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        self.ensure_data_files()
    
    def load_users_data(self) -> Dict[int, UserData]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.users_data_file):
                with open(self.users_data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    return {
                        int(user_id): UserData(
                            wallet_addresses=user_data.get('wallet_addresses', []),
                            board_addresses=user_data.get('board_addresses', []),
                            completed_followers_tasks=user_data.get('completed_followers_tasks', 0),
                            completed_token_tasks=user_data.get('completed_token_tasks', 0)
                        )
                        for user_id, user_data in data.items()
                    }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return {}
    
    def save_users_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON —Ñ–∞–π–ª"""
        try:
            data = {
                str(user_id): {
                    'wallet_addresses': user_data.wallet_addresses,
                    'board_addresses': user_data.board_addresses,
                    'completed_followers_tasks': user_data.completed_followers_tasks,
                    'completed_token_tasks': user_data.completed_token_tasks
                }
                for user_id, user_data in self.users_data.items()
            }
            with open(self.users_data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    def ensure_data_files(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
        for file_path in [self.wallets_file, self.boards_file, self.tokens_file]:
            if not os.path.exists(file_path):
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write('')
    
    def is_valid_ethereum_address(self, address: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å Ethereum –∞–¥—Ä–µ—Å–∞"""
        pattern = r'^0x[a-fA-F0-9]{40}$'
        return bool(re.match(pattern, address))
    
    def extract_board_id(self, board_input: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –±–æ—Ä–¥–∞ –∏–∑ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –∞–¥—Ä–µ—Å–∞"""
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞
        if 'phi.box/board/' in board_input:
            return board_input.split('phi.box/board/')[-1]
        # –ï—Å–ª–∏ —ç—Ç–æ UUID
        uuid_pattern = r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
        if re.match(uuid_pattern, board_input, re.IGNORECASE):
            return board_input
        return None
    
    def get_main_menu_keyboard(self, user_id: int) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        user_data = self.users_data.get(user_id, UserData([], []))
        wallet_count = len(user_data.wallet_addresses)
        board_count = len(user_data.board_addresses)
        
        keyboard = [
            [InlineKeyboardButton("–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="my_data")],
            [InlineKeyboardButton("–§–æ–ª–ª–æ–≤–µ—Ä—ã", callback_data="followers")],
            [InlineKeyboardButton("Token holders", callback_data="token_holders")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_main_menu_message(self, user_id: int) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        user_data = self.users_data.get(user_id, UserData([], []))
        wallet_count = len(user_data.wallet_addresses)
        board_count = len(user_data.board_addresses)
        
        message = f"""ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PHI Helper Bot!

–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—á–∏–≤–æ–∫, –∞ —Ç–∞–∫–∂–µ —Å–≤–æ–∏ –±–æ—Ä–¥—ã.

üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ê–¥—Ä–µ—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤: {wallet_count}
‚Ä¢ –ë–æ—Ä–¥–æ–≤: {board_count}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        return message
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if user_id not in self.users_data:
            self.users_data[user_id] = UserData([], [])
            self.save_users_data()
        
        message = self.get_main_menu_message(user_id)
        keyboard = self.get_main_menu_keyboard(user_id)
        
        await update.message.reply_text(message, reply_markup=keyboard)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        if data == "my_data":
            await self.show_my_data_menu(query)
        elif data == "add_wallets":
            await self.show_add_wallets_menu(query)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥—Ä–µ—Å–æ–≤
            context.user_data['mode'] = '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤'
        elif data == "add_boards":
            await self.show_add_boards_menu(query)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ä–¥–æ–≤
            context.user_data['mode'] = '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ä–¥–æ–≤'
        elif data == "followers":
            await self.show_followers_menu(query)
        elif data == "token_holders":
            await self.show_token_holders_menu(query)
        elif data == "back_to_main":
            await self.show_main_menu(query)
        elif data.startswith("followers_wallet_"):
            wallet_index = int(data.split("_")[2])
            await self.handle_followers_wallet_selection(query, wallet_index)
        elif data.startswith("token_wallet_"):
            wallet_index = int(data.split("_")[2])
            await self.handle_token_wallet_selection(query, wallet_index)
        elif data.startswith("followers_refresh_"):
            wallet_index = int(data.split("_")[2])
            await self.handle_followers_refresh(query, wallet_index)
        elif data.startswith("followers_done_"):
            wallet_index = int(data.split("_")[2])
            await self.handle_followers_done(query, wallet_index)
        elif data.startswith("followers_continue_"):
            wallet_index = int(data.split("_")[2])
            await self.handle_followers_continue(query, wallet_index)
        elif data.startswith("token_refresh_"):
            wallet_index = int(data.split("_")[2])
            await self.handle_token_refresh(query, wallet_index)
        elif data.startswith("token_done_"):
            wallet_index = int(data.split("_")[2])
            await self.handle_token_done(query, wallet_index)
        elif data.startswith("token_continue_"):
            wallet_index = int(data.split("_")[2])
            await self.handle_token_continue(query, wallet_index)
    
    async def show_main_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user_id = query.from_user.id
        message = self.get_main_menu_message(user_id)
        keyboard = self.get_main_menu_keyboard(user_id)
        
        await query.edit_message_text(message, reply_markup=keyboard)
    
    async def show_my_data_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é '–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ'"""
        user_id = query.from_user.id
        user_data = self.users_data.get(user_id, UserData([], []))
        
        message = f"""üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ

–ê–¥—Ä–µ—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤: {len(user_data.wallet_addresses)}
–ë–æ—Ä–¥–æ–≤: {len(user_data.board_addresses)}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        keyboard = [
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å–∞", callback_data="add_wallets")],
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ä–¥—ã", callback_data="add_boards")],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        
        await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def show_add_wallets_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤"""
        message = """üí≥ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ EVM (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å 0x).
–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.

–ü—Ä–∏–º–µ—Ä:
0xC7f9154a72524097B1323961F584f7047b875271
0x1234567890123456789012345678901234567890

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞":"""
        
        keyboard = [
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="my_data")]
        ]
        
        await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def show_add_boards_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ä–¥–æ–≤"""
        message = """üéØ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ä–¥–æ–≤

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–æ—Ä–¥—ã –∏–ª–∏ –∏—Ö ID.
–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–æ—Ä–¥–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.

–ü—Ä–∏–º–µ—Ä—ã:
https://phi.box/board/5ced1c01-dca1-4021-8a9d-870955020444
5ced1c01-dca1-4021-8a9d-870955020444

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ä–¥—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞":"""
        
        keyboard = [
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="my_data")]
        ]
        
        await query.edit_message_text(
            text=message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            disable_web_page_preview=True
        )
    
    async def show_followers_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤"""
        user_id = query.from_user.id
        user_data = self.users_data.get(user_id, UserData([], []))
        
        if not user_data.wallet_addresses:
            message = """üë• –§–æ–ª–ª–æ–≤–µ—Ä—ã

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤.
–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤."""
            
            keyboard = [
                [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å–∞", callback_data="add_wallets")],
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
        else:
            message = """üë• –§–æ–ª–ª–æ–≤–µ—Ä—ã

–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤:"""
            
            keyboard = []
            for i, address in enumerate(user_data.wallet_addresses):
                short_address = f"{address[:6]}...{address[-4:]}"
                keyboard.append([InlineKeyboardButton(
                    f"üì± {short_address}", 
                    callback_data=f"followers_wallet_{i}"
                )])
            
            keyboard.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def show_token_holders_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é token holders"""
        user_id = query.from_user.id
        user_data = self.users_data.get(user_id, UserData([], []))
        
        if not user_data.wallet_addresses or not user_data.board_addresses:
            message = """ü™ô Token holders

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤ –∏–ª–∏ –±–æ—Ä–¥–æ–≤.
–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ö–æ–ª–¥–µ—Ä–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤."""
            
            keyboard = [
                [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å–∞", callback_data="add_wallets")],
                [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ä–¥—ã", callback_data="add_boards")],
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
        else:
            message = """ü™ô Token holders

–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–æ–ª–¥–µ—Ä–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤:"""
            
            keyboard = []
            for i, address in enumerate(user_data.wallet_addresses):
                short_address = f"{address[:6]}...{address[-4:]}"
                keyboard.append([InlineKeyboardButton(
                    f"üì± {short_address}", 
                    callback_data=f"token_wallet_{i}"
                )])
            
            keyboard.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def handle_followers_wallet_selection(self, query, wallet_index: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤"""
        user_id = query.from_user.id
        user_data = self.users_data.get(user_id, UserData([], []))
        
        if wallet_index >= len(user_data.wallet_addresses):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–æ—à–µ–ª—å–∫–∞")
            return
        
        wallet_address = user_data.wallet_addresses[wallet_index]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫—É Trendsetter
        achievement = self.api_client.get_trendsetter_achievement(wallet_address)
        
        if not achievement:
            message = f"""‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—á–∏–≤–∫–∏

–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—á–∏–≤–∫–µ –¥–ª—è –∞–¥—Ä–µ—Å–∞:
{wallet_address}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."""
            
            keyboard = [
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="followers")]
            ]
        elif achievement['completed']:
            # –ê—á–∏–≤–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥—Ä–µ—Å –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
            is_in_global_list = wallet_address in self.data_manager.read_wallets()
            
            if is_in_global_list:
                # –ê–¥—Ä–µ—Å —É–∂–µ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                message = f"""‚úÖ –ê—á–∏–≤–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ê—á–∏–≤–∫–∞ "Trendsetter" —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞:
{wallet_address}

–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?"""
            else:
                # –ê–¥—Ä–µ—Å –Ω–µ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                self.add_wallet_to_global_list(wallet_address)
                message = f"""‚úÖ –ê—á–∏–≤–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ê—á–∏–≤–∫–∞ "Trendsetter" —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞:
{wallet_address}

–í–∞—à –∞–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–º–æ—â–∏ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–º–æ–≥–∞—Ç—å?"""
            
            keyboard = [
                [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"followers_continue_{wallet_index}")],
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="followers")]
            ]
        else:
            remaining = achievement['remaining']
            progress = achievement['progress_count']
            required = achievement['required_count']
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            user_data = self.users_data.get(user_id, UserData([], []))
            completed_tasks = user_data.completed_followers_tasks
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª –∑–∞–¥–∞–Ω–∏—è, —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if completed_tasks > 0:
                remaining = max(0, remaining - completed_tasks)
            
            message = f"""üìä –°—Ç–∞—Ç—É—Å –∞—á–∏–≤–∫–∏ "Trendsetter"

–ê–¥—Ä–µ—Å: {wallet_address}
–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}/{required}
–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å: {remaining} —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤
–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completed_tasks}

–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏..."""
            
            await query.edit_message_text(message)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏
            profile_links = self.generate_followers_links(remaining, wallet_address, user_id)
            
            if profile_links:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                target_addresses = self.extract_addresses_from_links(profile_links)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in self.users_data:
                self.users_data[user_id] = UserData([], [])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–∏ –¥–ª—è —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.users_data[user_id]
            if not hasattr(user_data, 'followers_targets'):
                user_data.followers_targets = {}
            if not hasattr(user_data, 'followers_user_wallet'):
                user_data.followers_user_wallet = {}
            
            user_data.followers_targets[wallet_index] = target_addresses
            user_data.followers_user_wallet[wallet_index] = wallet_address
            self.save_users_data()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
            message = f"""üë• –§–æ–ª–ª–æ–≤–µ—Ä—ã –¥–ª—è –∞–¥—Ä–µ—Å–∞ {wallet_address[:10]}...

üìã –î–æ—Å—Ç—É–ø–Ω–æ –∞–¥—Ä–µ—Å–æ–≤: {len(profile_links)} –∏–∑ {remaining} –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö

–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏:
{chr(10).join([f"{i+1}. {link}" for i, link in enumerate(profile_links)])}

–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ"."""
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"followers_refresh_{wallet_index}")],
                [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"followers_done_{wallet_index}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="followers")]
            ]
            
            # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–¥—Ä–µ—Å–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è
            if len(profile_links) < remaining:
                self.add_wallet_to_global_list(wallet_address)
                
                if self.background_checker:
                    self.background_checker.add_waiting_user(
                        user_id=user_id,
                        wallet_index=wallet_index,
                        wallet_address=wallet_address,
                        check_type="followers",
                        needed_count=remaining
                    )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–¥—Ä–µ—Å–æ–≤
                message += f"""

‚è≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.
–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞."""
        
        await query.edit_message_text(
            text=message,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard),
            disable_web_page_preview=True
        )
    
    async def handle_token_wallet_selection(self, query, wallet_index: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è token holders"""
        user_id = query.from_user.id
        user_data = self.users_data.get(user_id, UserData([], []))
        
        if wallet_index >= len(user_data.wallet_addresses):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–æ—à–µ–ª—å–∫–∞")
            return
        
        wallet_address = user_data.wallet_addresses[wallet_index]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫—É They Lovin' It
        achievement = self.api_client.get_token_holders_achievement(wallet_address)
        
        if not achievement:
            message = f"""‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—á–∏–≤–∫–∏

–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—á–∏–≤–∫–µ –¥–ª—è –∞–¥—Ä–µ—Å–∞:
{wallet_address}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."""
            
            keyboard = [
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="token_holders")]
            ]
        elif achievement['completed']:
            # –ê—á–∏–≤–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥—Ä–µ—Å –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
            is_in_global_list = wallet_address in self.data_manager.read_wallets()
            
            if is_in_global_list:
                # –ê–¥—Ä–µ—Å —É–∂–µ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                message = f"""‚úÖ –ê—á–∏–≤–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ê—á–∏–≤–∫–∞ "They Lovin' It" —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞:
{wallet_address}

–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?"""
            else:
                # –ê–¥—Ä–µ—Å –Ω–µ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                self.add_wallet_to_global_list(wallet_address)
                message = f"""‚úÖ –ê—á–∏–≤–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ê—á–∏–≤–∫–∞ "They Lovin' It" —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞:
{wallet_address}

–í–∞—à –∞–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–º–æ—â–∏ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–º–æ–≥–∞—Ç—å?"""
            
            keyboard = [
                [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"token_continue_{wallet_index}")],
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="token_holders")]
            ]
        else:
            remaining = achievement['remaining']
            progress = achievement['progress_count']
            required = achievement['required_count']
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            user_data = self.users_data.get(user_id, UserData([], []))
            completed_tasks = user_data.completed_token_tasks
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª –∑–∞–¥–∞–Ω–∏—è, —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if completed_tasks > 0:
                remaining = max(0, remaining - completed_tasks)
            
            message = f"""üìä –°—Ç–∞—Ç—É—Å –∞—á–∏–≤–∫–∏ "They Lovin' It"

–ê–¥—Ä–µ—Å: {wallet_address}
–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}/{required}
–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å: {remaining} —Ö–æ–ª–¥–µ—Ä–æ–≤
–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completed_tasks}

–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤..."""
            
            await query.edit_message_text(message)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–∫–µ–Ω—ã
            token_links = self.generate_token_links(remaining, wallet_address, user_id)
            
            if token_links:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                target_board_ids = self.extract_board_ids_from_links(token_links)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in self.users_data:
                self.users_data[user_id] = UserData([], [])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.users_data[user_id]
            if not hasattr(user_data, 'token_targets'):
                user_data.token_targets = {}
            if not hasattr(user_data, 'token_user_wallet'):
                user_data.token_user_wallet = {}
            
            user_data.token_targets[wallet_index] = target_board_ids
            user_data.token_user_wallet[wallet_index] = wallet_address
            self.save_users_data()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
            message = f"""ü™ô Token holders –¥–ª—è –∞–¥—Ä–µ—Å–∞ {wallet_address[:10]}...

üìã –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(token_links)} –∏–∑ {remaining} –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö

–ö—É–ø–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã:
{chr(10).join([f"{i+1}. {link}" for i, link in enumerate(token_links)])}

–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ"."""
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"token_refresh_{wallet_index}")],
                [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"token_done_{wallet_index}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="token_holders")]
            ]
            
            # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è
            if len(token_links) < remaining:
                self.add_wallet_to_global_list(wallet_address)
                
                if self.background_checker:
                    self.background_checker.add_waiting_user(
                        user_id=user_id,
                        wallet_index=wallet_index,
                        wallet_address=wallet_address,
                        check_type="tokens",
                        needed_count=remaining
                    )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤
                message += f"""

‚è≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.
–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã."""
        
        await query.edit_message_text(
            text=message,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard),
            disable_web_page_preview=True
        )
    
    def generate_followers_links(self, count: int, exclude_wallet: str, user_id: int = None) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            user_addresses = set()
            if user_id and user_id in self.users_data:
                user_addresses = set(self.users_data[user_id].wallet_addresses)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            user_addresses.add(exclude_wallet)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏, –∏—Å–∫–ª—é—á–∞—è –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            available_wallets = self.data_manager.get_random_wallets(count, user_addresses)
            
            if len(available_wallets) < count:
                # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—à–µ–ª—å–∫–æ–≤, –±–µ—Ä–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
                all_wallets = self.data_manager.read_wallets()
                available_wallets = [w for w in all_wallets if w not in user_addresses]
            
            # –°–æ–∑–¥–∞–µ–º HTML-—Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏
            links = []
            for wallet in available_wallets[:count]:
                links.append(f'<a href="https://phi.box/profile/{wallet}">{wallet}</a>')
            
            return links
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏: {e}")
            return []
    
    def generate_token_links(self, count: int, exclude_wallet: str, user_id: int = None) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–æ—Ä–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            user_boards = set()
            if user_id and user_id in self.users_data:
                user_boards = set(self.users_data[user_id].board_addresses)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã, –∏—Å–∫–ª—é—á–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–æ—Ä–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            available_tokens = self.data_manager.get_random_tokens(count, user_boards)
            
            if len(available_tokens) < count:
                # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤, –±–µ—Ä–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
                all_tokens = self.data_manager.read_tokens()
                available_tokens = [t for t in all_tokens if t not in user_boards]
            
            # –°–æ–∑–¥–∞–µ–º HTML-—Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–∫–µ–Ω—ã
            links = []
            for board_id in available_tokens[:count]:
                links.append(f'<a href="https://phi.box/board/{board_id}?referrer={exclude_wallet}">{board_id}</a>')
            
            return links
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–æ–∫–µ–Ω—ã: {e}")
            return []
    
    async def handle_followers_refresh(self, query, wallet_index: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –¥–ª—è —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤"""
        user_id = query.from_user.id
        user_data = self.users_data.get(user_id, UserData([], []))
        
        if wallet_index >= len(user_data.wallet_addresses):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–æ—à–µ–ª—å–∫–∞")
            return
        
        wallet_address = user_data.wallet_addresses[wallet_index]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫—É —Å–Ω–æ–≤–∞
        achievement = self.api_client.get_trendsetter_achievement(wallet_address)
        
        if not achievement or achievement['completed']:
            await self.handle_followers_wallet_selection(query, wallet_index)
            return
        
        remaining = achievement['remaining']
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏
        profile_links = self.generate_followers_links(remaining, wallet_address, user_id)
        
        if profile_links:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            target_addresses = self.extract_addresses_from_links(profile_links)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in self.users_data:
                self.users_data[user_id] = UserData([], [])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–∏ –¥–ª—è —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.users_data[user_id]
            if not hasattr(user_data, 'followers_targets'):
                user_data.followers_targets = {}
            if not hasattr(user_data, 'followers_user_wallet'):
                user_data.followers_user_wallet = {}
            
            user_data.followers_targets[wallet_index] = target_addresses
            user_data.followers_user_wallet[wallet_index] = wallet_address
            self.save_users_data()
            
            links_text = "\n".join([f"‚Ä¢ {link}" for link in profile_links])
            message = f"""üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏

–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç–∏ –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è {remaining} —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤:

{links_text}

–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ"."""
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"followers_refresh_{wallet_index}")],
                [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"followers_done_{wallet_index}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="followers")]
            ]
        else:
            message = f"""‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–¥—Ä–µ—Å–æ–≤

–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫."""
            
            keyboard = [
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="followers")]
            ]
        
        await query.edit_message_text(
            text=message,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard),
            disable_web_page_preview=True
        )
    
    async def handle_followers_done(self, query, wallet_index: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫"""
        user_id = query.from_user.id
        user_data = self.users_data.get(user_id, UserData([], []))
        
        if wallet_index >= len(user_data.wallet_addresses):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–æ—à–µ–ª—å–∫–∞")
            return
        
        wallet_address = user_data.wallet_addresses[wallet_index]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –±—ã–ª–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
        # –≠—Ç–æ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏–ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫—É
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫—É —Å–Ω–æ–≤–∞
        achievement = self.api_client.get_trendsetter_achievement(wallet_address)
        
        if not achievement:
            message = f"""‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—á–∏–≤–∫–∏

–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—á–∏–≤–∫–∏.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."""
            
            keyboard = [
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="followers")]
            ]
        elif achievement['completed']:
            # –ê—á–∏–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥—Ä–µ—Å –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
            is_in_global_list = wallet_address in self.data_manager.read_wallets()
            
            if not is_in_global_list:
                self.add_wallet_to_global_list(wallet_address)
                message = f"""üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!

–ê—á–∏–≤–∫–∞ "Trendsetter" —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞:
{wallet_address}

–í–∞—à –∞–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–º–æ—â–∏ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {user_data.completed_followers_tasks}"""
            else:
                message = f"""üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!

–ê—á–∏–≤–∫–∞ "Trendsetter" —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞:
{wallet_address}

–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {user_data.completed_followers_tasks}"""
            
            user_data.completed_followers_tasks += 1
            self.save_users_data()
            
            keyboard = [
                [InlineKeyboardButton("‚Üê –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
        else:
            # –ê—á–∏–≤–∫–∞ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            await self.check_specific_followers(query, wallet_index, wallet_address)
    
    async def handle_followers_continue(self, query, wallet_index: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–º–æ—â–∏ –¥—Ä—É–≥–∏–º
        available_wallets = self.data_manager.get_random_wallets(5)
        
        if available_wallets:
            links_text = "\n".join([f"‚Ä¢ <a href=\"https://phi.box/profile/{wallet}\">{wallet}</a>" for wallet in available_wallets])
            message = f"""ü§ù –ü–æ–º–æ—â—å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç–∏ –ø—Ä–æ—Ñ–∏–ª–∏, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º –ø–æ–ª—É—á–∏—Ç—å –∞—á–∏–≤–∫—É:

{links_text}

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å! üôè"""
            
            keyboard = [
                [InlineKeyboardButton("‚Üê –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
        else:
            message = f"""‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤

–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø–æ–º–æ—â–∏."""
            
            keyboard = [
                [InlineKeyboardButton("‚Üê –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
        
        await query.edit_message_text(
            text=message,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard),
            disable_web_page_preview=True
        )
    
    async def handle_token_refresh(self, query, wallet_index: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤"""
        user_id = query.from_user.id
        user_data = self.users_data.get(user_id, UserData([], []))
        
        if wallet_index >= len(user_data.wallet_addresses):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–æ—à–µ–ª—å–∫–∞")
            return
        
        wallet_address = user_data.wallet_addresses[wallet_index]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫—É —Å–Ω–æ–≤–∞
        achievement = self.api_client.get_token_holders_achievement(wallet_address)
        
        if not achievement or achievement['completed']:
            await self.handle_token_wallet_selection(query, wallet_index)
            return
        
        remaining = achievement['remaining']
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏
        token_links = self.generate_token_links(remaining, wallet_address, user_id)
        
        if token_links:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            target_board_ids = self.extract_board_ids_from_links(token_links)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in self.users_data:
                self.users_data[user_id] = UserData([], [])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.users_data[user_id]
            if not hasattr(user_data, 'token_targets'):
                user_data.token_targets = {}
            if not hasattr(user_data, 'token_user_wallet'):
                user_data.token_user_wallet = {}
            
            user_data.token_targets[wallet_index] = target_board_ids
            user_data.token_user_wallet[wallet_index] = wallet_address
            self.save_users_data()
            
            links_text = "\n".join([f"‚Ä¢ {link}" for link in token_links])
            message = f"""üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤

–ö—É–ø–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –ø–æ —ç—Ç–∏–º —Å—Å—ã–ª–∫–∞–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è {remaining} —Ö–æ–ª–¥–µ—Ä–æ–≤:

{links_text}

–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ"."""
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"token_refresh_{wallet_index}")],
                [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"token_done_{wallet_index}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="token_holders")]
            ]
        else:
            message = f"""‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤

–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫."""
            
            keyboard = [
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="token_holders")]
            ]
        
        await query.edit_message_text(
            text=message,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard),
            disable_web_page_preview=True
        )
    
    async def handle_token_done(self, query, wallet_index: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
        user_id = query.from_user.id
        user_data = self.users_data.get(user_id, UserData([], []))
        
        if wallet_index >= len(user_data.wallet_addresses):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–æ—à–µ–ª—å–∫–∞")
            return
        
        wallet_address = user_data.wallet_addresses[wallet_index]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫—É —Å–Ω–æ–≤–∞
        achievement = self.api_client.get_token_holders_achievement(wallet_address)
        
        if not achievement:
            message = f"""‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—á–∏–≤–∫–∏

–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—á–∏–≤–∫–∏.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."""
            
            keyboard = [
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="token_holders")]
            ]
        elif achievement['completed']:
            # –ê—á–∏–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥—Ä–µ—Å –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
            is_in_global_list = wallet_address in self.data_manager.read_wallets()
            
            if not is_in_global_list:
                self.add_wallet_to_global_list(wallet_address)
                message = f"""üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!

–ê—á–∏–≤–∫–∞ "They Lovin' It" —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞:
{wallet_address}

–í–∞—à –∞–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–º–æ—â–∏ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {user_data.completed_token_tasks}"""
            else:
                message = f"""üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!

–ê—á–∏–≤–∫–∞ "They Lovin' It" —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞:
{wallet_address}

–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {user_data.completed_token_tasks}"""
            
            user_data.completed_token_tasks += 1
            self.save_users_data()
            
            keyboard = [
                [InlineKeyboardButton("‚Üê –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
        else:
            # –ê—á–∏–≤–∫–∞ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
            await self.check_specific_token_purchases(query, wallet_index, wallet_address)
    
    async def handle_token_continue(self, query, wallet_index: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ç–æ–∫–µ–Ω–∞–º–∏"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ–º–æ—â–∏ –¥—Ä—É–≥–∏–º
        available_tokens = self.data_manager.get_random_tokens(5)
        
        if available_tokens:
            links_text = "\n".join([f"‚Ä¢ <a href=\"https://phi.box/board/{board_id}\">{board_id}</a>" for board_id in available_tokens])
            message = f"""ü§ù –ü–æ–º–æ—â—å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

–ö—É–ø–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –ø–æ —ç—Ç–∏–º —Å—Å—ã–ª–∫–∞–º, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º –ø–æ–ª—É—á–∏—Ç—å –∞—á–∏–≤–∫—É:

{links_text}

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å! üôè"""
            
            keyboard = [
                [InlineKeyboardButton("‚Üê –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
        else:
            message = f"""‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤

–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–º–æ—â–∏."""
            
            keyboard = [
                [InlineKeyboardButton("‚Üê –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
        
        await query.edit_message_text(
            text=message,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard),
            disable_web_page_preview=True
        )
    
    async def check_specific_token_purchases(self, query, wallet_index: int, user_wallet: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        user_id = query.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        user_data = self.users_data.get(user_id, UserData([], []))
        target_board_ids = getattr(user_data, 'token_targets', {}).get(wallet_index, [])
        
        if not target_board_ids:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫—É
            achievement = self.api_client.get_token_holders_achievement(user_wallet)
            if not achievement:
                message = f"""‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—á–∏–≤–∫–∏

–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—á–∏–≤–∫–∏.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."""
                
                keyboard = [
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="token_holders")]
                ]
            else:
                remaining = achievement['remaining']
                message = f"""‚è≥ –ê—á–∏–≤–∫–∞ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞

–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å: {remaining} —Ö–æ–ª–¥–µ—Ä–æ–≤

–í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥."""
                
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"token_done_{wallet_index}")],
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="token_holders")]
                ]
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ API
            await query.edit_message_text("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω
            purchase_results = self.api_client.check_multiple_token_purchases(target_board_ids, user_wallet)
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –∏ –Ω–µ–∫—É–ø–ª–µ–Ω–Ω—ã–µ
            purchased = [board_id for board_id, is_purchased in purchase_results.items() if is_purchased]
            not_purchased = [board_id for board_id, is_purchased in purchase_results.items() if not is_purchased]
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∫—É–ø–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            if not purchased and not_purchased:
                if self.background_checker:
                    self.background_checker.add_pending_check(
                        user_id=user_id,
                        wallet_index=wallet_index,
                        wallet_address=user_wallet,
                        check_type="tokens",
                        target_board_ids=target_board_ids
                    )
                
                message = f"""‚è≥ –î–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å

API –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –≤—ã –ø–æ–∫–∞ –Ω–µ –∫—É–ø–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ {len(target_board_ids)} —Ç–æ–∫–µ–Ω–æ–≤.

–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –∫—É–ø–∏–ª–∏ –≤—Å–µ —Ç–æ–∫–µ–Ω—ã, –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –º–µ–Ω—é.
–ú—ã –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –∏ —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤—è—Ç—Å—è.

–ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ–≤–µ—Ä–æ–∫: 30 (2.5 —á–∞—Å–∞)"""
                
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"token_done_{wallet_index}")],
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="token_holders")]
                ]
                
                await query.edit_message_text(
                    text=message,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    disable_web_page_preview=True
                )
                return
            
            if not not_purchased:
                # –í—Å–µ –ø–æ–∫—É–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
                user_data = self.users_data.get(user_id, UserData([], []))
                user_data.completed_token_tasks += len(purchased)
                self.save_users_data()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫—É –µ—â–µ —Ä–∞–∑
                achievement = self.api_client.get_token_holders_achievement(user_wallet)
                if achievement and achievement['completed']:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥—Ä–µ—Å –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
                    is_in_global_list = user_wallet in self.data_manager.read_wallets()
                    if not is_in_global_list:
                        self.add_wallet_to_global_list(user_wallet)
                        message = f"""üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!

–ê—á–∏–≤–∫–∞ "They Lovin' It" —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞:
{user_wallet}

–í–∞—à –∞–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–º–æ—â–∏ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {user_data.completed_token_tasks}"""
                    else:
                        message = f"""üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!

–ê—á–∏–≤–∫–∞ "They Lovin' It" —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞:
{user_wallet}

–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {user_data.completed_token_tasks}"""
                    
                    keyboard = [
                        [InlineKeyboardButton("‚Üê –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                    ]
                else:
                    message = f"""‚úÖ –ü–æ–∫—É–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!

–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –≤—Å–µ {len(purchased)} —Ç–æ–∫–µ–Ω–æ–≤.
–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {user_data.completed_token_tasks}

–ê—á–∏–≤–∫–∞ –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."""
                    
                    keyboard = [
                        [InlineKeyboardButton("‚Üê –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                    ]
            else:
                # –ï—Å—Ç—å –Ω–µ–∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
                not_purchased_links = [f'<a href="https://phi.box/board/{board_id}?referrer={user_wallet}">{board_id}</a>' for board_id in not_purchased]
                links_text = "\n".join([f"‚Ä¢ {link}" for link in not_purchased_links])
                
                message = f"""‚ö†Ô∏è –ù–µ –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã

–í—ã –∫—É–ø–∏–ª–∏ {len(purchased)} –∏–∑ {len(target_board_ids)} —Ç–æ–∫–µ–Ω–æ–≤.

–û—Å—Ç–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å:
{links_text}

–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ" –µ—â–µ —Ä–∞–∑."""
                
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"token_done_{wallet_index}")],
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="token_holders")]
                ]
        
        await query.edit_message_text(
            text=message,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard),
            disable_web_page_preview=True
        )
    
    async def check_specific_followers(self, query, wallet_index: int, user_wallet: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = query.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        user_data = self.users_data.get(user_id, UserData([], []))
        target_addresses = getattr(user_data, 'followers_targets', {}).get(wallet_index, [])
        
        if not target_addresses:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫—É
            achievement = self.api_client.get_trendsetter_achievement(user_wallet)
            if not achievement:
                message = f"""‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—á–∏–≤–∫–∏

–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—á–∏–≤–∫–∏.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."""
                
                keyboard = [
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="followers")]
                ]
            else:
                remaining = achievement['remaining']
                message = f"""‚è≥ –ê—á–∏–≤–∫–∞ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞

–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å: {remaining} —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤

–í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥."""
                
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"followers_done_{wallet_index}")],
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="followers")]
                ]
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ API
            await query.edit_message_text("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∞–¥—Ä–µ—Å
            follow_results = self.api_client.check_multiple_followers(target_addresses, user_wallet)
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –∏ –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ
            followed = [addr for addr, is_following in follow_results.items() if is_following]
            not_followed = [addr for addr, is_following in follow_results.items() if not is_following]
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∏ –Ω–∞ –∫–æ–≥–æ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            if not followed and not_followed:
                if self.background_checker:
                    self.background_checker.add_pending_check(
                        user_id=user_id,
                        wallet_index=wallet_index,
                        wallet_address=user_wallet,
                        check_type="followers",
                        target_addresses=target_addresses
                    )
                
                message = f"""‚è≥ –î–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å

API –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –≤—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∏ –Ω–∞ –∫–æ–≥–æ –∏–∑ {len(target_addresses)} –ø—Ä–æ—Ñ–∏–ª–µ–π.

–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ—Ö, –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –º–µ–Ω—é.
–ú—ã –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –∏ —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤—è—Ç—Å—è.

–ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ–≤–µ—Ä–æ–∫: 30 (2.5 —á–∞—Å–∞)"""
                
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"followers_done_{wallet_index}")],
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="followers")]
                ]
                
                await query.edit_message_text(
                    text=message,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    disable_web_page_preview=True
                )
                return
            
            if not not_followed:
                # –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
                user_data = self.users_data.get(user_id, UserData([], []))
                user_data.completed_followers_tasks += len(followed)
                self.save_users_data()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫—É –µ—â–µ —Ä–∞–∑
                achievement = self.api_client.get_trendsetter_achievement(user_wallet)
                if achievement and achievement['completed']:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥—Ä–µ—Å –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
                    is_in_global_list = user_wallet in self.data_manager.read_wallets()
                    if not is_in_global_list:
                        self.add_wallet_to_global_list(user_wallet)
                        message = f"""üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!

–ê—á–∏–≤–∫–∞ "Trendsetter" —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞:
{user_wallet}

–í–∞—à –∞–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–º–æ—â–∏ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {user_data.completed_followers_tasks}"""
                    else:
                        message = f"""üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!

–ê—á–∏–≤–∫–∞ "Trendsetter" —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞:
{user_wallet}

–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {user_data.completed_followers_tasks}"""
                    
                    keyboard = [
                        [InlineKeyboardButton("‚Üê –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                    ]
                else:
                    message = f"""‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!

–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ {len(followed)} –ø—Ä–æ—Ñ–∏–ª–µ–π.
–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {user_data.completed_followers_tasks}

–ê—á–∏–≤–∫–∞ –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."""
                    
                    keyboard = [
                        [InlineKeyboardButton("‚Üê –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                    ]
            else:
                # –ï—Å—Ç—å –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                not_followed_links = [f'<a href="https://phi.box/profile/{addr}">{addr}</a>' for addr in not_followed]
                links_text = "\n".join([f"‚Ä¢ {link}" for link in not_followed_links])
                
                message = f"""‚ö†Ô∏è –ù–µ –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã

–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {len(followed)} –∏–∑ {len(target_addresses)} –ø—Ä–æ—Ñ–∏–ª–µ–π.

–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞:
{links_text}

–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ—Ö, –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –º–µ–Ω—é. 
–ú—ã –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –∏ —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤—è—Ç—Å—è."""
                
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"followers_done_{wallet_index}")],
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"followers_done_{wallet_index}")],
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="followers")]
                ]
        
        await query.edit_message_text(
            text=message,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard),
            disable_web_page_preview=True
        )
    
    def add_wallet_to_global_list(self, wallet_address: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–¥—Ä–µ—Å –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤"""
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
            current_wallets = self.data_manager.read_wallets()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if wallet_address not in current_wallets:
                current_wallets.append(wallet_address)
                self.data_manager.write_wallets(current_wallets)
                print(f"–ê–¥—Ä–µ—Å {wallet_address} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫: {e}")
    
    def extract_addresses_from_links(self, links: List[str]) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–¥—Ä–µ—Å–∞ –∏–∑ HTML-—Å—Å—ã–ª–æ–∫ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏"""
        addresses = []
        for link in links:
            if "phi.box/profile/" in link:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å –∏–∑ HTML-—Å—Å—ã–ª–∫–∏ –≤–∏–¥–∞ <a href="https://phi.box/profile/{address}">{address}</a>
                address = link.split("phi.box/profile/")[-1].split('"')[0]
                if self.is_valid_ethereum_address(address):
                    addresses.append(address)
        return addresses
    
    def extract_board_ids_from_links(self, links: List[str]) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –±–æ—Ä–¥–æ–≤ –∏–∑ HTML-—Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–æ–∫–µ–Ω—ã"""
        board_ids = []
        for link in links:
            if "phi.box/board/" in link:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –±–æ—Ä–¥–∞ –∏–∑ HTML-—Å—Å—ã–ª–∫–∏ –≤–∏–¥–∞ <a href="https://phi.box/board/{board_id}?referrer={wallet}">{board_id}</a>
                board_part = link.split("phi.box/board/")[-1].split('"')[0]
                board_id = board_part.split("?")[0]  # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ ?
                if self.extract_board_id(board_id):
                    board_ids.append(board_id)
        return board_ids
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        text = update.message.text.strip()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫–æ–º —Ä–µ–∂–∏–º–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤" in context.user_data.get('mode', ''):
            await self.process_wallet_addresses(update, context, text)
        elif "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ä–¥–æ–≤" in context.user_data.get('mode', ''):
            await self.process_board_addresses(update, context, text)
    
    async def process_wallet_addresses(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤"""
        user_id = update.effective_user.id
        addresses = [addr.strip() for addr in text.split('\n') if addr.strip()]
        
        valid_addresses = []
        invalid_addresses = []
        
        for address in addresses:
            if self.is_valid_ethereum_address(address):
                valid_addresses.append(address)
            else:
                invalid_addresses.append(address)
        
        if valid_addresses:
            if user_id not in self.users_data:
                self.users_data[user_id] = UserData([], [])
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞
            for address in valid_addresses:
                if address not in self.users_data[user_id].wallet_addresses:
                    self.users_data[user_id].wallet_addresses.append(address)
            
            self.save_users_data()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Ñ–∞–π–ª –∫–æ—à–µ–ª—å–∫–æ–≤
            self.update_wallets_file()
        
        message = f"""‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞

–í–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: {len(valid_addresses)}
–ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: {len(invalid_addresses)}"""
        
        if invalid_addresses:
            message += f"\n\n‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:\n" + "\n".join(invalid_addresses)
        
        keyboard = [
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ –¥–∞–Ω–Ω—ã–º", callback_data="my_data")]
        ]
        
        await update.message.reply_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
        context.user_data['mode'] = ''
    
    async def process_board_addresses(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ä–¥–æ–≤"""
        user_id = update.effective_user.id
        boards = [board.strip() for board in text.split('\n') if board.strip()]
        
        valid_boards = []
        invalid_boards = []
        
        for board in boards:
            board_id = self.extract_board_id(board)
            if board_id:
                valid_boards.append(board_id)
            else:
                invalid_boards.append(board)
        
        if valid_boards:
            if user_id not in self.users_data:
                self.users_data[user_id] = UserData([], [])
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –±–æ—Ä–¥—ã
            for board_id in valid_boards:
                if board_id not in self.users_data[user_id].board_addresses:
                    self.users_data[user_id].board_addresses.append(board_id)
            
            self.save_users_data()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ —Ñ–∞–π–ª—ã
            self.update_boards_file()
            self.update_tokens_file()
        
        message = f"""‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞

–í–∞–ª–∏–¥–Ω—ã—Ö –±–æ—Ä–¥–æ–≤: {len(valid_boards)}
–ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –±–æ—Ä–¥–æ–≤: {len(invalid_boards)}"""
        
        if invalid_boards:
            message += f"\n\n‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –±–æ—Ä–¥—ã:\n" + "\n".join(invalid_boards)
        
        keyboard = [
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ –¥–∞–Ω–Ω—ã–º", callback_data="my_data")]
        ]
        
        await update.message.reply_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
        context.user_data['mode'] = ''
    
    def update_wallets_file(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—â–∏–π —Ñ–∞–π–ª –∫–æ—à–µ–ª—å–∫–æ–≤"""
        all_wallets = set()
        for user_data in self.users_data.values():
            all_wallets.update(user_data.wallet_addresses)
        
        self.data_manager.write_wallets(list(all_wallets))
    
    def update_boards_file(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—â–∏–π —Ñ–∞–π–ª –±–æ—Ä–¥–æ–≤"""
        all_boards = set()
        for user_data in self.users_data.values():
            all_boards.update(user_data.board_addresses)
        
        self.data_manager.write_boards(list(all_boards))
    
    def update_tokens_file(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—â–∏–π —Ñ–∞–π–ª —Ç–æ–∫–µ–Ω–æ–≤"""
        all_tokens = set()
        for user_data in self.users_data.values():
            for board in user_data.board_addresses:
                all_tokens.add(board)
        
        self.data_manager.write_tokens(list(all_tokens))
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        if not self.bot_token:
            print("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(self.bot_token).build()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.background_checker = BackgroundChecker(self)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        import asyncio
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        background_task = loop.create_task(self.background_checker.start_background_checking())
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            self.application.run_polling()
        except KeyboardInterrupt:
            print("\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            self.background_checker.stop_background_checking()
            background_task.cancel()
            loop.close()

if __name__ == "__main__":
    bot = PHIBot()
    bot.run()
