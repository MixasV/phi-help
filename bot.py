import os
import json
import random
import re
from typing import Dict, List, Optional
from dataclasses import dataclass
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
from phi_api import PHIAPI
from data_utils import DataManager
from background_checker import BackgroundChecker

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

@dataclass
class UserData:
    wallet_addresses: List[str]
    board_addresses: List[str]
    completed_followers_tasks: int = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ —Ñ–æ–ª–ª–æ–≤–µ—Ä–∞–º
    completed_token_tasks: int = 0      # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ —Ç–æ–∫–µ–Ω–∞–º
    sent_achievement_notifications: Dict[str, List[str]] = None  # –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {achievement_name: [wallet_addresses]}
    language: str = 'ru'  # –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ru/en)
    
    def __post_init__(self):
        if self.sent_achievement_notifications is None:
            self.sent_achievement_notifications = {}

class PHIBot:
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN')
        self.wallets_file = os.getenv('WALLETS_FILE', 'wallets.txt')
        self.boards_file = os.getenv('BOARDS_FILE', 'boards.txt')
        self.tokens_file = os.getenv('TOKENS_FILE', 'tokens.txt')
        self.users_data_file = os.getenv('USERS_DATA_FILE', 'users_data.json')
        self.followers_threshold = int(os.getenv('FOLLOWERS_THRESHOLD', '10'))
        self.token_holders_threshold = int(os.getenv('TOKEN_HOLDERS_THRESHOLD', '10'))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –∫–ª–∏–µ–Ω—Ç –∏ –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        self.api_client = PHIAPI()
        self.data_manager = DataManager(self.wallets_file, self.boards_file, self.tokens_file)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.background_checker = None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.users_data = self.load_users_data()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        self.ensure_data_files()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
        self.translations = self.init_translations()
    
    def init_translations(self) -> Dict[str, Dict[str, str]]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        return {
            'ru': {
                'welcome': 'ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PHI Helper Bot!\n\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—á–∏–≤–æ–∫, –∞ —Ç–∞–∫–∂–µ —Å–≤–æ–∏ –±–æ—Ä–¥—ã.\n\nüìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n‚Ä¢ –ê–¥—Ä–µ—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤: {wallet_count}\n‚Ä¢ –ë–æ—Ä–¥–æ–≤: {board_count}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                'my_data': '–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ',
                'followers': '–§–æ–ª–ª–æ–≤–µ—Ä—ã',
                'token_holders': 'Token holders',
                'back': '‚Üê –ù–∞–∑–∞–¥',
                'main_menu': '‚Üê –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                'add_wallets': '–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å–∞',
                'add_boards': '–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ä–¥—ã',
                'cancel': '–û—Ç–º–µ–Ω–∞',
                'done': '‚úÖ –ì–æ—Ç–æ–≤–æ',
                'refresh': 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
                'continue': '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                'language_selection': 'üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:',
                'russian': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
                'english': 'üá∫üá∏ English',
                'language_changed': '‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {language}',
                'my_data_title': 'üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ\n\n–ê–¥—Ä–µ—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤: {wallet_count}\n–ë–æ—Ä–¥–æ–≤: {board_count}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                'add_wallets_title': 'üí≥ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ EVM (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å 0x).\n–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n\n–ü—Ä–∏–º–µ—Ä:\n0xC7f9154a72524097B1323961F584f7047b875271\n0x1234567890123456789012345678901234567890\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞":',
                'add_boards_title': 'üéØ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ä–¥–æ–≤\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–æ—Ä–¥—ã –∏–ª–∏ –∏—Ö ID.\n–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–æ—Ä–¥–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n\n–ü—Ä–∏–º–µ—Ä—ã:\nhttps://phi.box/board/5ced1c01-dca1-4021-8a9d-870955020444\n5ced1c01-dca1-4021-8a9d-870955020444\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ä–¥—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞":',
                'followers_title': 'üë• –§–æ–ª–ª–æ–≤–µ—Ä—ã\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤.\n–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤.',
                'followers_select': 'üë• –§–æ–ª–ª–æ–≤–µ—Ä—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤:',
                'token_holders_title': 'ü™ô Token holders\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤ –∏–ª–∏ –±–æ—Ä–¥–æ–≤.\n–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ö–æ–ª–¥–µ—Ä–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤.',
                'token_holders_select': 'ü™ô Token holders\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–æ–ª–¥–µ—Ä–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤:',
                'processing_complete': '‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n–í–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: {valid_count}\n–ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: {invalid_count}',
                'processing_complete_boards': '‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n–í–∞–ª–∏–¥–Ω—ã—Ö –±–æ—Ä–¥–æ–≤: {valid_count}\n–ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –±–æ—Ä–¥–æ–≤: {invalid_count}',
                'invalid_addresses': '‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:\n{addresses}',
                'invalid_boards': '‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –±–æ—Ä–¥—ã:\n{boards}',
                'back_to_data': '‚Üê –ù–∞–∑–∞–¥ –∫ –¥–∞–Ω–Ω—ã–º',
                'add_wallets_btn': '–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å–∞',
                'add_boards_btn': '–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ä–¥—ã',
                'back_to_main_btn': '‚Üê –ù–∞–∑–∞–¥',
                'error_wallet_index': '‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–æ—à–µ–ª—å–∫–∞',
                'error_achievement_check': '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—á–∏–≤–∫–∏\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—á–∏–≤–∫–µ –¥–ª—è –∞–¥—Ä–µ—Å–∞:\n{wallet_address}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                'error_achievement_check_general': '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—á–∏–≤–∫–∏\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—á–∏–≤–∫–∏.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                'achievement_completed': '‚úÖ –ê—á–∏–≤–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ê—á–∏–≤–∫–∞ "{achievement_name}" —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞:\n{wallet_address}\n\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?',
                'achievement_completed_added': '‚úÖ –ê—á–∏–≤–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ê—á–∏–≤–∫–∞ "{achievement_name}" —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞:\n{wallet_address}\n\n–í–∞—à –∞–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–º–æ—â–∏ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–º–æ–≥–∞—Ç—å?',
                'trendsetter_status': 'üìä –°—Ç–∞—Ç—É—Å –∞—á–∏–≤–∫–∏ "Trendsetter"\n\n–ê–¥—Ä–µ—Å: {wallet_address}\n–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}/{required}\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å: {remaining} —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completed_tasks}\n\n–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏...',
                'token_holders_status': 'üìä –°—Ç–∞—Ç—É—Å –∞—á–∏–≤–∫–∏ "They Lovin\' It"\n\n–ê–¥—Ä–µ—Å: {wallet_address}\n–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}/{required}\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å: {remaining} —Ö–æ–ª–¥–µ—Ä–æ–≤\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completed_tasks}\n\n–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤...',
                'followers_available': 'üë• –§–æ–ª–ª–æ–≤–µ—Ä—ã –¥–ª—è –∞–¥—Ä–µ—Å–∞ {wallet_address_short}...\n\nüìã –î–æ—Å—Ç—É–ø–Ω–æ –∞–¥—Ä–µ—Å–æ–≤: {available_count} –∏–∑ {needed_count} –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö\n\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏:\n{links}\n\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ".',
                'tokens_available': 'ü™ô Token holders –¥–ª—è –∞–¥—Ä–µ—Å–∞ {wallet_address_short}...\n\nüìã –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {available_count} –∏–∑ {needed_count} –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö\n\n–ö—É–ø–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã:\n{links}\n\n–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ".',
                'insufficient_addresses': '\n\n‚è≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.\n–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞.',
                'insufficient_tokens': '\n\n‚è≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.\n–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã.',
                'achievement_success': 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n–ê—á–∏–≤–∫–∞ "{achievement_name}" —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞:\n{wallet_address}\n\n–í–∞—à –∞–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–º–æ—â–∏ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completed_tasks}',
                'achievement_success_simple': 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n–ê—á–∏–≤–∫–∞ "{achievement_name}" —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞:\n{wallet_address}\n\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completed_tasks}',
                'help_others_followers': 'ü§ù –ü–æ–º–æ—â—å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç–∏ –ø—Ä–æ—Ñ–∏–ª–∏, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º –ø–æ–ª—É—á–∏—Ç—å –∞—á–∏–≤–∫—É:\n\n{links}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å! üôè',
                'help_others_tokens': 'ü§ù –ü–æ–º–æ—â—å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n–ö—É–ø–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –ø–æ —ç—Ç–∏–º —Å—Å—ã–ª–∫–∞–º, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º –ø–æ–ª—É—á–∏—Ç—å –∞—á–∏–≤–∫—É:\n\n{links}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å! üôè',
                'no_available_addresses': '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤\n\n–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø–æ–º–æ—â–∏.',
                'no_available_tokens': '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤\n\n–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–º–æ—â–∏.',
                'achievement_not_completed': '‚è≥ –ê—á–∏–≤–∫–∞ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å: {remaining} {type}\n\n–í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥.',
                'checking_purchases': 'üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤...',
                'checking_followers': 'üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏...',
                'data_not_updated': '‚è≥ –î–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å\n\nAPI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –≤—ã –ø–æ–∫–∞ –Ω–µ –∫—É–ø–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ {count} —Ç–æ–∫–µ–Ω–æ–≤.\n\n–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –∫—É–ø–∏–ª–∏ –≤—Å–µ —Ç–æ–∫–µ–Ω—ã, –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –º–µ–Ω—é.\n–ú—ã –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –∏ —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤—è—Ç—Å—è.\n\n–ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ–≤–µ—Ä–æ–∫: 30 (2.5 —á–∞—Å–∞)',
                'data_not_updated_followers': '‚è≥ –î–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å\n\nAPI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –≤—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∏ –Ω–∞ –∫–æ–≥–æ –∏–∑ {count} –ø—Ä–æ—Ñ–∏–ª–µ–π.\n\n–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ—Ö, –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –º–µ–Ω—é.\n–ú—ã –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –∏ —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤—è—Ç—Å—è.\n\n–ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ–≤–µ—Ä–æ–∫: 30 (2.5 —á–∞—Å–∞)',
                'all_purchases_complete': '‚úÖ –ü–æ–∫—É–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –≤—Å–µ {count} —Ç–æ–∫–µ–Ω–æ–≤.\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completed_tasks}\n\n–ê—á–∏–≤–∫–∞ –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.',
                'all_followers_complete': '‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ {count} –ø—Ä–æ—Ñ–∏–ª–µ–π.\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completed_tasks}\n\n–ê—á–∏–≤–∫–∞ –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.',
                'not_all_purchases': '‚ö†Ô∏è –ù–µ –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã\n\n–í—ã –∫—É–ø–∏–ª–∏ {purchased} –∏–∑ {total} —Ç–æ–∫–µ–Ω–æ–≤.\n\n–û—Å—Ç–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å:\n{links}\n\n–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ" –µ—â–µ —Ä–∞–∑.',
                'not_all_followers': '‚ö†Ô∏è –ù–µ –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã\n\n–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {followed} –∏–∑ {total} –ø—Ä–æ—Ñ–∏–ª–µ–π.\n\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞:\n{links}\n\n–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ—Ö, –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –º–µ–Ω—é.\n–ú—ã –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –∏ —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤—è—Ç—Å—è.',
                'insufficient_tokens_system': '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤\n\n–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫.',
                'insufficient_addresses_system': '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–¥—Ä–µ—Å–æ–≤\n\n–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫.',
                'refresh_links_tokens': 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤\n\n–ö—É–ø–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –ø–æ —ç—Ç–∏–º —Å—Å—ã–ª–∫–∞–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è {remaining} —Ö–æ–ª–¥–µ—Ä–æ–≤:\n\n{links}\n\n–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ".',
                'refresh_links_followers': 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏\n\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç–∏ –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è {remaining} —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤:\n\n{links}\n\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ".',
                'followers_type': '—Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤',
                'holders_type': '—Ö–æ–ª–¥–µ—Ä–æ–≤'
            },
            'en': {
                'welcome': 'ü§ñ Welcome to PHI Helper Bot!\n\nYou can add your wallet addresses to complete achievements, as well as your boards.\n\nüìä Your statistics:\n‚Ä¢ Wallet addresses: {wallet_count}\n‚Ä¢ Boards: {board_count}\n\nChoose an action:',
                'my_data': 'My Data',
                'followers': 'Followers',
                'token_holders': 'Token holders',
                'back': '‚Üê Back',
                'main_menu': '‚Üê Main Menu',
                'add_wallets': 'Add Addresses',
                'add_boards': 'Add Boards',
                'cancel': 'Cancel',
                'done': '‚úÖ Done',
                'refresh': 'üîÑ Refresh',
                'continue': 'Continue',
                'language_selection': 'üåê Choose language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
                'russian': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
                'english': 'üá∫üá∏ English',
                'language_changed': '‚úÖ Language changed to: {language}',
                'my_data_title': 'üìã My Data\n\nWallet addresses: {wallet_count}\nBoards: {board_count}\n\nChoose an action:',
                'add_wallets_title': 'üí≥ Adding Wallet Addresses\n\nSend wallet addresses in EVM format (starting with 0x).\nYou can send multiple addresses, each on a new line.\n\nExample:\n0xC7f9154a72524097B1323961F584f7047b875271\n0x1234567890123456789012345678901234567890\n\nSend addresses or press "Cancel":',
                'add_boards_title': 'üéØ Adding Boards\n\nSend board links or their IDs.\nYou can send multiple boards, each on a new line.\n\nExamples:\nhttps://phi.box/board/5ced1c01-dca1-4021-8a9d-870955020444\n5ced1c01-dca1-4021-8a9d-870955020444\n\nSend boards or press "Cancel":',
                'followers_title': 'üë• Followers\n\nYou don\'t have any wallet addresses added yet.\nFirst add addresses to get followers.',
                'followers_select': 'üë• Followers\n\nChoose a wallet address to get followers:',
                'token_holders_title': 'ü™ô Token holders\n\nYou don\'t have any wallet addresses or boards added yet.\nFirst add them to get token holders.',
                'token_holders_select': 'ü™ô Token holders\n\nChoose a wallet address to get token holders:',
                'processing_complete': '‚úÖ Processing complete\n\nValid addresses: {valid_count}\nInvalid addresses: {invalid_count}',
                'processing_complete_boards': '‚úÖ Processing complete\n\nValid boards: {valid_count}\nInvalid boards: {invalid_count}',
                'invalid_addresses': '‚ùå Invalid addresses:\n{addresses}',
                'invalid_boards': '‚ùå Invalid boards:\n{boards}',
                'back_to_data': '‚Üê Back to data',
                'add_wallets_btn': 'Add Addresses',
                'add_boards_btn': 'Add Boards',
                'back_to_main_btn': '‚Üê Back',
                'error_wallet_index': '‚ùå Error: invalid wallet index',
                'error_achievement_check': '‚ùå Achievement check error\n\nFailed to get achievement information for address:\n{wallet_address}\n\nPlease try again later.',
                'error_achievement_check_general': '‚ùå Achievement check error\n\nFailed to verify achievement completion.\nPlease try again later.',
                'achievement_completed': '‚úÖ Achievement already completed!\n\nüéâ Congratulations! Achievement "{achievement_name}" is already completed for address:\n{wallet_address}\n\nWould you like to continue and help other users?',
                'achievement_completed_added': '‚úÖ Achievement already completed!\n\nüéâ Congratulations! Achievement "{achievement_name}" is already completed for address:\n{wallet_address}\n\nYour address has been added to the general list to help other users.\nWould you like to continue helping?',
                'trendsetter_status': 'üìä "Trendsetter" Achievement Status\n\nAddress: {wallet_address}\nProgress: {progress}/{required}\nRemaining to get: {remaining} followers\nCompleted tasks: {completed_tasks}\n\nGenerating subscription links...',
                'token_holders_status': 'üìä "They Lovin\' It" Achievement Status\n\nAddress: {wallet_address}\nProgress: {progress}/{required}\nRemaining to get: {remaining} holders\nCompleted tasks: {completed_tasks}\n\nGenerating token purchase links...',
                'followers_available': 'üë• Followers for address {wallet_address_short}...\n\nüìã Available addresses: {available_count} out of {needed_count} needed\n\nSubscribe to the following profiles:\n{links}\n\nAfter subscribing, press "Done".',
                'tokens_available': 'ü™ô Token holders for address {wallet_address_short}...\n\nüìã Available tokens: {available_count} out of {needed_count} needed\n\nBuy the following tokens:\n{links}\n\nAfter purchasing, press "Done".',
                'insufficient_addresses': '\n\n‚è≥ Not enough addresses to complete the task.\nWe will notify you when new addresses appear.',
                'insufficient_tokens': '\n\n‚è≥ Not enough tokens to complete the task.\nWe will notify you when new tokens appear.',
                'achievement_success': 'üéâ Congratulations!\n\nAchievement "{achievement_name}" successfully completed for address:\n{wallet_address}\n\nYour address has been added to the general list to help other users.\nCompleted tasks: {completed_tasks}',
                'achievement_success_simple': 'üéâ Congratulations!\n\nAchievement "{achievement_name}" successfully completed for address:\n{wallet_address}\n\nCompleted tasks: {completed_tasks}',
                'help_others_followers': 'ü§ù Helping other users\n\nSubscribe to these profiles to help others get the achievement:\n\n{links}\n\nThank you for your help! üôè',
                'help_others_tokens': 'ü§ù Helping other users\n\nBuy tokens using these links to help others get the achievement:\n\n{links}\n\nThank you for your help! üôè',
                'no_available_addresses': '‚ùå No available addresses\n\nThere are no other addresses in the system for help.',
                'no_available_tokens': '‚ùå No available tokens\n\nThere are no other tokens in the system for help.',
                'achievement_not_completed': '‚è≥ Achievement not completed yet\n\nRemaining to get: {remaining} {type}\n\nYou may need to wait some time for data to update.\nTry checking again in 30 seconds.',
                'checking_purchases': 'üîç Checking token purchases...',
                'checking_followers': 'üîç Checking subscriptions...',
                'data_not_updated': '‚è≥ Data not updated yet\n\nAPI shows you haven\'t bought any of the {count} tokens yet.\n\nIf you\'re sure you bought all tokens, you can close this menu.\nWe will check every 5 minutes and notify you when data updates.\n\nMaximum checks: 30 (2.5 hours)',
                'data_not_updated_followers': '‚è≥ Data not updated yet\n\nAPI shows you haven\'t subscribed to any of the {count} profiles yet.\n\nIf you\'re sure you subscribed to everyone, you can close this menu.\nWe will check every 5 minutes and notify you when data updates.\n\nMaximum checks: 30 (2.5 hours)',
                'all_purchases_complete': '‚úÖ Purchases completed!\n\nYou successfully bought all {count} tokens.\nCompleted tasks: {completed_tasks}\n\nAchievement may update after some time.',
                'all_followers_complete': '‚úÖ Subscriptions completed!\n\nYou successfully subscribed to all {count} profiles.\nCompleted tasks: {completed_tasks}\n\nAchievement may update after some time.',
                'not_all_purchases': '‚ö†Ô∏è Not all purchases completed\n\nYou bought {purchased} out of {total} tokens.\n\nStill need to buy:\n{links}\n\nAfter purchasing, press "Done" again.',
                'not_all_followers': '‚ö†Ô∏è Not all subscriptions completed\n\nYou subscribed to {followed} out of {total} profiles.\n\nStill need to subscribe to:\n{links}\n\nIf you\'re sure you subscribed to everyone, you can close this menu.\nWe will check every 5 minutes and notify you when data updates.',
                'insufficient_tokens_system': '‚ùå Not enough tokens\n\nThere are not enough tokens in the system to generate links.',
                'insufficient_addresses_system': '‚ùå Not enough addresses\n\nThere are not enough addresses in the system to generate links.',
                'refresh_links_tokens': 'üîÑ Updated token purchase links\n\nBuy tokens using these links to get {remaining} holders:\n\n{links}\n\nAfter purchasing, press "Done".',
                'refresh_links_followers': 'üîÑ Updated subscription links\n\nSubscribe to these profiles to get {remaining} followers:\n\n{links}\n\nAfter subscribing, press "Done".',
                'followers_type': 'followers',
                'holders_type': 'holders'
            }
        }
    
    def get_text(self, user_id: int, key: str, **kwargs) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_data = self.users_data.get(user_id, UserData([], []))
        language = user_data.language
        text = self.translations.get(language, self.translations['ru']).get(key, key)
        return text.format(**kwargs) if kwargs else text
    
    def load_users_data(self) -> Dict[int, UserData]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.users_data_file):
                with open(self.users_data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    return {
                        int(user_id): UserData(
                            wallet_addresses=user_data.get('wallet_addresses', []),
                            board_addresses=user_data.get('board_addresses', []),
                            completed_followers_tasks=user_data.get('completed_followers_tasks', 0),
                            completed_token_tasks=user_data.get('completed_token_tasks', 0),
                            language=user_data.get('language', 'ru')
                        )
                        for user_id, user_data in data.items()
                    }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return {}
    
    def save_users_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON —Ñ–∞–π–ª"""
        try:
            data = {
                str(user_id): {
                    'wallet_addresses': user_data.wallet_addresses,
                    'board_addresses': user_data.board_addresses,
                    'completed_followers_tasks': user_data.completed_followers_tasks,
                    'completed_token_tasks': user_data.completed_token_tasks,
                    'language': user_data.language
                }
                for user_id, user_data in self.users_data.items()
            }
            with open(self.users_data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    def ensure_data_files(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
        for file_path in [self.wallets_file, self.boards_file, self.tokens_file]:
            if not os.path.exists(file_path):
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write('')
    
    def is_valid_ethereum_address(self, address: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å Ethereum –∞–¥—Ä–µ—Å–∞"""
        pattern = r'^0x[a-fA-F0-9]{40}$'
        return bool(re.match(pattern, address))
    
    def extract_board_id(self, board_input: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –±–æ—Ä–¥–∞ –∏–∑ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –∞–¥—Ä–µ—Å–∞"""
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞
        if 'phi.box/board/' in board_input:
            return board_input.split('phi.box/board/')[-1]
        # –ï—Å–ª–∏ —ç—Ç–æ UUID
        uuid_pattern = r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
        if re.match(uuid_pattern, board_input, re.IGNORECASE):
            return board_input
        return None
    
    def get_main_menu_keyboard(self, user_id: int) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        user_data = self.users_data.get(user_id, UserData([], []))
        wallet_count = len(user_data.wallet_addresses)
        board_count = len(user_data.board_addresses)
        
        keyboard = [
            [InlineKeyboardButton(self.get_text(user_id, 'my_data'), callback_data="my_data")],
            [InlineKeyboardButton(self.get_text(user_id, 'followers'), callback_data="followers")],
            [InlineKeyboardButton(self.get_text(user_id, 'token_holders'), callback_data="token_holders")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_main_menu_message(self, user_id: int) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        user_data = self.users_data.get(user_id, UserData([], []))
        wallet_count = len(user_data.wallet_addresses)
        board_count = len(user_data.board_addresses)
        
        return self.get_text(user_id, 'welcome', wallet_count=wallet_count, board_count=board_count)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if user_id not in self.users_data:
            self.users_data[user_id] = UserData([], [])
            self.save_users_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
        user_data = self.users_data[user_id]
        if not hasattr(user_data, 'language') or user_data.language is None:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
            await self.show_language_selection(update)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            message = self.get_main_menu_message(user_id)
            keyboard = self.get_main_menu_keyboard(user_id)
            await update.message.reply_text(message, reply_markup=keyboard)
    
    async def show_language_selection(self, update: Update):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
        message = "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:"
        keyboard = [
            [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_language_ru")],
            [InlineKeyboardButton("üá∫üá∏ English", callback_data="set_language_en")]
        ]
        
        if hasattr(update, 'message'):
            await update.message.reply_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await update.callback_query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def language_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /language"""
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if user_id not in self.users_data:
            self.users_data[user_id] = UserData([], [])
            self.save_users_data()
        
        await self.show_language_selection(update)
    
    async def set_language(self, query, language: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = query.from_user.id
        
        if user_id not in self.users_data:
            self.users_data[user_id] = UserData([], [])
        
        self.users_data[user_id].language = language
        self.save_users_data()
        
        language_name = "–†—É—Å—Å–∫–∏–π" if language == 'ru' else "English"
        message = f"‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {language_name}"
        
        keyboard = [
            [InlineKeyboardButton(self.get_text(user_id, 'main_menu'), callback_data="back_to_main")]
        ]
        
        await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def my_data_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my"""
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if user_id not in self.users_data:
            self.users_data[user_id] = UserData([], [])
            self.save_users_data()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π query –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞
        class FakeQuery:
            def __init__(self, user_id):
                self.from_user = type('obj', (object,), {'id': user_id})()
            
            async def edit_message_text(self, text, reply_markup=None):
                await update.message.reply_text(text, reply_markup=reply_markup)
        
        fake_query = FakeQuery(user_id)
        await self.show_my_data_menu(fake_query)
    
    async def trendsetter_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /trendsetter"""
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if user_id not in self.users_data:
            self.users_data[user_id] = UserData([], [])
            self.save_users_data()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π query –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞
        class FakeQuery:
            def __init__(self, user_id):
                self.from_user = type('obj', (object,), {'id': user_id})()
            
            async def edit_message_text(self, text, reply_markup=None):
                await update.message.reply_text(text, reply_markup=reply_markup)
        
        fake_query = FakeQuery(user_id)
        await self.show_followers_menu(fake_query)
    
    async def tokens_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tokens"""
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if user_id not in self.users_data:
            self.users_data[user_id] = UserData([], [])
            self.save_users_data()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π query –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞
        class FakeQuery:
            def __init__(self, user_id):
                self.from_user = type('obj', (object,), {'id': user_id})()
            
            async def edit_message_text(self, text, reply_markup=None):
                await update.message.reply_text(text, reply_markup=reply_markup)
        
        fake_query = FakeQuery(user_id)
        await self.show_token_holders_menu(fake_query)
    
    async def set_bot_commands(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        from telegram import BotCommand
        
        commands = [
            BotCommand("start", "Main menu / –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand("my", "My data / –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ"),
            BotCommand("trendsetter", "Execute subscriptions / –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"),
            BotCommand("tokens", "Buy user tokens / –ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
            BotCommand("language", "Language selection / –í—ã–±–æ—Ä —è–∑—ã–∫–∞")
        ]
        
        await self.application.bot.set_my_commands(commands)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        if data == "my_data":
            await self.show_my_data_menu(query)
        elif data == "add_wallets":
            await self.show_add_wallets_menu(query)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥—Ä–µ—Å–æ–≤
            context.user_data['mode'] = '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤'
        elif data == "add_boards":
            await self.show_add_boards_menu(query)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ä–¥–æ–≤
            context.user_data['mode'] = '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ä–¥–æ–≤'
        elif data == "followers":
            await self.show_followers_menu(query)
        elif data == "token_holders":
            await self.show_token_holders_menu(query)
        elif data == "back_to_main":
            await self.show_main_menu(query)
        elif data == "set_language_ru":
            await self.set_language(query, 'ru')
        elif data == "set_language_en":
            await self.set_language(query, 'en')
        elif data.startswith("followers_wallet_"):
            wallet_index = int(data.split("_")[2])
            await self.handle_followers_wallet_selection(query, wallet_index)
        elif data.startswith("token_wallet_"):
            wallet_index = int(data.split("_")[2])
            await self.handle_token_wallet_selection(query, wallet_index)
        elif data.startswith("followers_refresh_"):
            wallet_index = int(data.split("_")[2])
            await self.handle_followers_refresh(query, wallet_index)
        elif data.startswith("followers_done_"):
            wallet_index = int(data.split("_")[2])
            await self.handle_followers_done(query, wallet_index)
        elif data.startswith("followers_continue_"):
            wallet_index = int(data.split("_")[2])
            await self.handle_followers_continue(query, wallet_index)
        elif data.startswith("token_refresh_"):
            wallet_index = int(data.split("_")[2])
            await self.handle_token_refresh(query, wallet_index)
        elif data.startswith("token_done_"):
            wallet_index = int(data.split("_")[2])
            await self.handle_token_done(query, wallet_index)
        elif data.startswith("token_continue_"):
            wallet_index = int(data.split("_")[2])
            await self.handle_token_continue(query, wallet_index)
    
    async def show_main_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user_id = query.from_user.id
        message = self.get_main_menu_message(user_id)
        keyboard = self.get_main_menu_keyboard(user_id)
        
        await query.edit_message_text(message, reply_markup=keyboard)
    
    async def show_my_data_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é '–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ'"""
        user_id = query.from_user.id
        user_data = self.users_data.get(user_id, UserData([], []))
        
        message = self.get_text(user_id, 'my_data_title', 
                               wallet_count=len(user_data.wallet_addresses),
                               board_count=len(user_data.board_addresses))
        
        keyboard = [
            [InlineKeyboardButton(self.get_text(user_id, 'add_wallets'), callback_data="add_wallets")],
            [InlineKeyboardButton(self.get_text(user_id, 'add_boards'), callback_data="add_boards")],
            [InlineKeyboardButton(self.get_text(user_id, 'back'), callback_data="back_to_main")]
        ]
        
        await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def show_add_wallets_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤"""
        user_id = query.from_user.id
        message = self.get_text(user_id, 'add_wallets_title')
        
        keyboard = [
            [InlineKeyboardButton(self.get_text(user_id, 'cancel'), callback_data="my_data")]
        ]
        
        await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def show_add_boards_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ä–¥–æ–≤"""
        user_id = query.from_user.id
        message = self.get_text(user_id, 'add_boards_title')
        
        keyboard = [
            [InlineKeyboardButton(self.get_text(user_id, 'cancel'), callback_data="my_data")]
        ]
        
        await query.edit_message_text(
            text=message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            disable_web_page_preview=True
        )
    
    async def show_followers_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤"""
        user_id = query.from_user.id
        user_data = self.users_data.get(user_id, UserData([], []))
        
        if not user_data.wallet_addresses:
            message = self.get_text(user_id, 'followers_title')
            
            keyboard = [
                [InlineKeyboardButton(self.get_text(user_id, 'add_wallets'), callback_data="add_wallets")],
                [InlineKeyboardButton(self.get_text(user_id, 'back'), callback_data="back_to_main")]
            ]
        else:
            message = self.get_text(user_id, 'followers_select')
            
            keyboard = []
            for i, address in enumerate(user_data.wallet_addresses):
                short_address = f"{address[:6]}...{address[-4:]}"
                keyboard.append([InlineKeyboardButton(
                    f"üì± {short_address}", 
                    callback_data=f"followers_wallet_{i}"
                )])
            
            keyboard.append([InlineKeyboardButton(self.get_text(user_id, 'back'), callback_data="back_to_main")])
        
        await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def show_token_holders_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é token holders"""
        user_id = query.from_user.id
        user_data = self.users_data.get(user_id, UserData([], []))
        
        if not user_data.wallet_addresses or not user_data.board_addresses:
            message = self.get_text(user_id, 'token_holders_title')
            
            keyboard = [
                [InlineKeyboardButton(self.get_text(user_id, 'add_wallets'), callback_data="add_wallets")],
                [InlineKeyboardButton(self.get_text(user_id, 'add_boards'), callback_data="add_boards")],
                [InlineKeyboardButton(self.get_text(user_id, 'back'), callback_data="back_to_main")]
            ]
        else:
            message = self.get_text(user_id, 'token_holders_select')
            
            keyboard = []
            for i, address in enumerate(user_data.wallet_addresses):
                short_address = f"{address[:6]}...{address[-4:]}"
                keyboard.append([InlineKeyboardButton(
                    f"üì± {short_address}", 
                    callback_data=f"token_wallet_{i}"
                )])
            
            keyboard.append([InlineKeyboardButton(self.get_text(user_id, 'back'), callback_data="back_to_main")])
        
        await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def handle_followers_wallet_selection(self, query, wallet_index: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤"""
        user_id = query.from_user.id
        user_data = self.users_data.get(user_id, UserData([], []))
        
        if wallet_index >= len(user_data.wallet_addresses):
            await query.edit_message_text(self.get_text(user_id, 'error_wallet_index'))
            return
        
        wallet_address = user_data.wallet_addresses[wallet_index]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫—É Trendsetter
        achievement = self.api_client.get_trendsetter_achievement(wallet_address)
        
        if not achievement:
            message = self.get_text(user_id, 'error_achievement_check', wallet_address=wallet_address)
            
            keyboard = [
                [InlineKeyboardButton(self.get_text(user_id, 'back'), callback_data="followers")]
            ]
        elif achievement['completed']:
            # –ê—á–∏–≤–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥—Ä–µ—Å –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
            is_in_global_list = wallet_address in self.data_manager.read_wallets()
            
            if is_in_global_list:
                # –ê–¥—Ä–µ—Å —É–∂–µ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                message = self.get_text(user_id, 'achievement_completed', 
                                      achievement_name='Trendsetter', wallet_address=wallet_address)
            else:
                # –ê–¥—Ä–µ—Å –Ω–µ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                self.add_wallet_to_global_list(wallet_address)
                message = self.get_text(user_id, 'achievement_completed_added', 
                                      achievement_name='Trendsetter', wallet_address=wallet_address)
            
            keyboard = [
                [InlineKeyboardButton(self.get_text(user_id, 'continue'), callback_data=f"followers_continue_{wallet_index}")],
                [InlineKeyboardButton(self.get_text(user_id, 'back'), callback_data="followers")]
            ]
        else:
            remaining = achievement['remaining']
            progress = achievement['progress_count']
            required = achievement['required_count']
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            user_data = self.users_data.get(user_id, UserData([], []))
            completed_tasks = user_data.completed_followers_tasks
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª –∑–∞–¥–∞–Ω–∏—è, —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if completed_tasks > 0:
                remaining = max(0, remaining - completed_tasks)
            
            message = self.get_text(user_id, 'trendsetter_status',
                                  wallet_address=wallet_address, progress=progress, 
                                  required=required, remaining=remaining, completed_tasks=completed_tasks)
            
            await query.edit_message_text(message)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏
            profile_links = self.generate_followers_links(remaining, wallet_address, user_id)
            
            if profile_links:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                target_addresses = self.extract_addresses_from_links(profile_links)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in self.users_data:
                self.users_data[user_id] = UserData([], [])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–∏ –¥–ª—è —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.users_data[user_id]
            if not hasattr(user_data, 'followers_targets'):
                user_data.followers_targets = {}
            if not hasattr(user_data, 'followers_user_wallet'):
                user_data.followers_user_wallet = {}
            
            user_data.followers_targets[wallet_index] = target_addresses
            user_data.followers_user_wallet[wallet_index] = wallet_address
            self.save_users_data()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
            links_text = chr(10).join([f"{i+1}. {link}" for i, link in enumerate(profile_links)])
            message = self.get_text(user_id, 'followers_available',
                                  wallet_address_short=wallet_address[:10],
                                  available_count=len(profile_links),
                                  needed_count=remaining,
                                  links=links_text)
            
            keyboard = [
                [InlineKeyboardButton(self.get_text(user_id, 'refresh'), callback_data=f"followers_refresh_{wallet_index}")],
                [InlineKeyboardButton(self.get_text(user_id, 'done'), callback_data=f"followers_done_{wallet_index}")],
                [InlineKeyboardButton(self.get_text(user_id, 'cancel'), callback_data="followers")]
            ]
            
            # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–¥—Ä–µ—Å–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è
            if len(profile_links) < remaining:
                self.add_wallet_to_global_list(wallet_address)
                
                if self.background_checker:
                    self.background_checker.add_waiting_user(
                        user_id=user_id,
                        wallet_index=wallet_index,
                        wallet_address=wallet_address,
                        check_type="followers",
                        needed_count=remaining
                    )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–¥—Ä–µ—Å–æ–≤
                message += self.get_text(user_id, 'insufficient_addresses')
        
        await query.edit_message_text(
            text=message,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard),
            disable_web_page_preview=True
        )
    
    async def handle_token_wallet_selection(self, query, wallet_index: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è token holders"""
        user_id = query.from_user.id
        user_data = self.users_data.get(user_id, UserData([], []))
        
        if wallet_index >= len(user_data.wallet_addresses):
            await query.edit_message_text(self.get_text(user_id, 'error_wallet_index'))
            return
        
        wallet_address = user_data.wallet_addresses[wallet_index]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫—É They Lovin' It
        achievement = self.api_client.get_token_holders_achievement(wallet_address)
        
        if not achievement:
            message = self.get_text(user_id, 'error_achievement_check', wallet_address=wallet_address)
            
            keyboard = [
                [InlineKeyboardButton(self.get_text(user_id, 'back'), callback_data="token_holders")]
            ]
        elif achievement['completed']:
            # –ê—á–∏–≤–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥—Ä–µ—Å –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
            is_in_global_list = wallet_address in self.data_manager.read_wallets()
            
            if is_in_global_list:
                # –ê–¥—Ä–µ—Å —É–∂–µ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                message = self.get_text(user_id, 'achievement_completed', 
                                      achievement_name="They Lovin' It", wallet_address=wallet_address)
            else:
                # –ê–¥—Ä–µ—Å –Ω–µ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                self.add_wallet_to_global_list(wallet_address)
                message = self.get_text(user_id, 'achievement_completed_added', 
                                      achievement_name="They Lovin' It", wallet_address=wallet_address)
            
            keyboard = [
                [InlineKeyboardButton(self.get_text(user_id, 'continue'), callback_data=f"token_continue_{wallet_index}")],
                [InlineKeyboardButton(self.get_text(user_id, 'back'), callback_data="token_holders")]
            ]
        else:
            remaining = achievement['remaining']
            progress = achievement['progress_count']
            required = achievement['required_count']
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            user_data = self.users_data.get(user_id, UserData([], []))
            completed_tasks = user_data.completed_token_tasks
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª –∑–∞–¥–∞–Ω–∏—è, —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if completed_tasks > 0:
                remaining = max(0, remaining - completed_tasks)
            
            message = self.get_text(user_id, 'token_holders_status',
                                  wallet_address=wallet_address, progress=progress, 
                                  required=required, remaining=remaining, completed_tasks=completed_tasks)
            
            await query.edit_message_text(message)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–∫–µ–Ω—ã
            token_links = self.generate_token_links(remaining, wallet_address, user_id)
            
            if token_links:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                target_board_ids = self.extract_board_ids_from_links(token_links)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in self.users_data:
                self.users_data[user_id] = UserData([], [])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.users_data[user_id]
            if not hasattr(user_data, 'token_targets'):
                user_data.token_targets = {}
            if not hasattr(user_data, 'token_user_wallet'):
                user_data.token_user_wallet = {}
            
            user_data.token_targets[wallet_index] = target_board_ids
            user_data.token_user_wallet[wallet_index] = wallet_address
            self.save_users_data()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
            links_text = chr(10).join([f"{i+1}. {link}" for i, link in enumerate(token_links)])
            message = self.get_text(user_id, 'tokens_available',
                                  wallet_address_short=wallet_address[:10],
                                  available_count=len(token_links),
                                  needed_count=remaining,
                                  links=links_text)
            
            keyboard = [
                [InlineKeyboardButton(self.get_text(user_id, 'refresh'), callback_data=f"token_refresh_{wallet_index}")],
                [InlineKeyboardButton(self.get_text(user_id, 'done'), callback_data=f"token_done_{wallet_index}")],
                [InlineKeyboardButton(self.get_text(user_id, 'cancel'), callback_data="token_holders")]
            ]
            
            # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è
            if len(token_links) < remaining:
                self.add_wallet_to_global_list(wallet_address)
                
                if self.background_checker:
                    self.background_checker.add_waiting_user(
                        user_id=user_id,
                        wallet_index=wallet_index,
                        wallet_address=wallet_address,
                        check_type="tokens",
                        needed_count=remaining
                    )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤
                message += self.get_text(user_id, 'insufficient_tokens')
        
        await query.edit_message_text(
            text=message,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard),
            disable_web_page_preview=True
        )
    
    def generate_followers_links(self, count: int, exclude_wallet: str, user_id: int = None) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤ –±–µ–∑ –∞—á–∏–≤–∫–∏ Trendsetter)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            user_addresses = set()
            if user_id and user_id in self.users_data:
                user_addresses = set(self.users_data[user_id].wallet_addresses)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            user_addresses.add(exclude_wallet)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ—à–µ–ª—å–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∏—Ö
            all_wallets = self.data_manager.read_wallets()
            filtered_wallets = []
            
            print(f"üîç –§–∏–ª—å—Ç—Ä—É–µ–º {len(all_wallets)} –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫...")
            
            for wallet in all_wallets:
                # –ò—Å–∫–ª—é—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if wallet in user_addresses:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫—É Trendsetter (–ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø—Ä–∏ 10+ —Ñ–æ–ª–ª–æ–≤–µ—Ä–∞—Ö)
                achievement = self.api_client.get_trendsetter_achievement(wallet)
                if achievement and achievement['completed']:
                    print(f"   ‚ùå –ê–¥—Ä–µ—Å {wallet[:10]}... —É–∂–µ –∏–º–µ–µ—Ç –∞—á–∏–≤–∫—É Trendsetter (10+ —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤) - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    # –£–¥–∞–ª—è–µ–º –∞–¥—Ä–µ—Å –∏–∑ —Ñ–∞–π–ª–∞, —Ç–∞–∫ –∫–∞–∫ –∞—á–∏–≤–∫–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞
                    self.data_manager.remove_wallet(wallet)
                    continue
                elif achievement is None:
                    print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞—á–∏–≤–∫—É –¥–ª—è {wallet[:10]}... - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                else:
                    print(f"   ‚úÖ –ê–¥—Ä–µ—Å {wallet[:10]}... –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ (—Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤: {achievement.get('progress_count', 0)})")
                    filtered_wallets.append(wallet)
            
            # –ë–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤
            if len(filtered_wallets) <= count:
                available_wallets = filtered_wallets
            else:
                available_wallets = random.sample(filtered_wallets, count)
            
            print(f"üìã –í—ã–±—Ä–∞–Ω–æ {len(available_wallets)} –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫")
            
            # –°–æ–∑–¥–∞–µ–º HTML-—Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏
            links = []
            for wallet in available_wallets:
                links.append(f'<a href="https://phi.box/profile/{wallet}">{wallet}</a>')
            
            return links
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏: {e}")
            return []
    
    def generate_token_links(self, count: int, exclude_wallet: str, user_id: int = None) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ö–æ–ª–¥–µ—Ä–æ–≤)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–æ—Ä–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            user_boards = set()
            if user_id and user_id in self.users_data:
                user_boards = set(self.users_data[user_id].board_addresses)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∏—Ö
            all_tokens = self.data_manager.read_tokens()
            filtered_tokens = []
            
            print(f"üîç –§–∏–ª—å—Ç—Ä—É–µ–º {len(all_tokens)} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–æ–∫...")
            
            for board_id in all_tokens:
                # –ò—Å–∫–ª—é—á–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–æ—Ä–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if board_id in user_boards:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–ª–¥–µ—Ä–æ–≤ —Ç–æ–∫–µ–Ω–∞
                holders_count = self.api_client.get_token_holders_count(board_id)
                if holders_count is None:
                    print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ö–æ–ª–¥–µ—Ä–æ–≤ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {board_id[:10]}... - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                elif holders_count >= 10:  # –ü–æ—Ä–æ–≥ –¥–ª—è –∞—á–∏–≤–∫–∏ "They Lovin' It"
                    print(f"   ‚ùå –¢–æ–∫–µ–Ω {board_id[:10]}... —É–∂–µ –∏–º–µ–µ—Ç {holders_count} —Ö–æ–ª–¥–µ—Ä–æ–≤ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    # –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞, —Ç–∞–∫ –∫–∞–∫ –∞—á–∏–≤–∫–∞ —É–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω–∞
                    self.data_manager.remove_token(board_id)
                    continue
                else:
                    print(f"   ‚úÖ –¢–æ–∫–µ–Ω {board_id[:10]}... –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–∫—É–ø–æ–∫ (—Ö–æ–ª–¥–µ—Ä–æ–≤: {holders_count})")
                    filtered_tokens.append(board_id)
            
            # –ë–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            if len(filtered_tokens) <= count:
                available_tokens = filtered_tokens
            else:
                available_tokens = random.sample(filtered_tokens, count)
            
            print(f"üìã –í—ã–±—Ä–∞–Ω–æ {len(available_tokens)} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–æ–∫")
            
            # –°–æ–∑–¥–∞–µ–º HTML-—Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–∫–µ–Ω—ã
            links = []
            for board_id in available_tokens:
                links.append(f'<a href="https://phi.box/board/{board_id}?referrer={exclude_wallet}">{board_id}</a>')
            
            return links
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–æ–∫–µ–Ω—ã: {e}")
            return []
    
    async def handle_followers_refresh(self, query, wallet_index: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –¥–ª—è —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤"""
        user_id = query.from_user.id
        user_data = self.users_data.get(user_id, UserData([], []))
        
        if wallet_index >= len(user_data.wallet_addresses):
            await query.edit_message_text(self.get_text(user_id, 'error_wallet_index'))
            return
        
        wallet_address = user_data.wallet_addresses[wallet_index]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫—É —Å–Ω–æ–≤–∞
        achievement = self.api_client.get_trendsetter_achievement(wallet_address)
        
        if not achievement or achievement['completed']:
            await self.handle_followers_wallet_selection(query, wallet_index)
            return
        
        remaining = achievement['remaining']
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏
        profile_links = self.generate_followers_links(remaining, wallet_address, user_id)
        
        if profile_links:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            target_addresses = self.extract_addresses_from_links(profile_links)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in self.users_data:
                self.users_data[user_id] = UserData([], [])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–∏ –¥–ª—è —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.users_data[user_id]
            if not hasattr(user_data, 'followers_targets'):
                user_data.followers_targets = {}
            if not hasattr(user_data, 'followers_user_wallet'):
                user_data.followers_user_wallet = {}
            
            user_data.followers_targets[wallet_index] = target_addresses
            user_data.followers_user_wallet[wallet_index] = wallet_address
            self.save_users_data()
            
            links_text = "\n".join([f"‚Ä¢ {link}" for link in profile_links])
            message = self.get_text(user_id, 'refresh_links_followers', remaining=remaining, links=links_text)
            
            keyboard = [
                [InlineKeyboardButton(self.get_text(user_id, 'refresh'), callback_data=f"followers_refresh_{wallet_index}")],
                [InlineKeyboardButton(self.get_text(user_id, 'done'), callback_data=f"followers_done_{wallet_index}")],
                [InlineKeyboardButton(self.get_text(user_id, 'cancel'), callback_data="followers")]
            ]
        else:
            message = self.get_text(user_id, 'insufficient_addresses_system')
            
            keyboard = [
                [InlineKeyboardButton(self.get_text(user_id, 'back'), callback_data="followers")]
            ]
        
        await query.edit_message_text(
            text=message,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard),
            disable_web_page_preview=True
        )
    
    async def handle_followers_done(self, query, wallet_index: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫"""
        user_id = query.from_user.id
        user_data = self.users_data.get(user_id, UserData([], []))
        
        if wallet_index >= len(user_data.wallet_addresses):
            await query.edit_message_text(self.get_text(user_id, 'error_wallet_index'))
            return
        
        wallet_address = user_data.wallet_addresses[wallet_index]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –±—ã–ª–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
        # –≠—Ç–æ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏–ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫—É
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫—É —Å–Ω–æ–≤–∞
        achievement = self.api_client.get_trendsetter_achievement(wallet_address)
        
        if not achievement:
            message = self.get_text(user_id, 'error_achievement_check_general')
            
            keyboard = [
                [InlineKeyboardButton(self.get_text(user_id, 'back'), callback_data="followers")]
            ]
        elif achievement['completed']:
            # –ê—á–∏–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥—Ä–µ—Å –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
            is_in_global_list = wallet_address in self.data_manager.read_wallets()
            
            if not is_in_global_list:
                self.add_wallet_to_global_list(wallet_address)
                message = self.get_text(user_id, 'achievement_success',
                                      achievement_name='Trendsetter', wallet_address=wallet_address,
                                      completed_tasks=user_data.completed_followers_tasks)
            else:
                message = self.get_text(user_id, 'achievement_success_simple',
                                      achievement_name='Trendsetter', wallet_address=wallet_address,
                                      completed_tasks=user_data.completed_followers_tasks)
            
            user_data.completed_followers_tasks += 1
            self.save_users_data()
            
            keyboard = [
                [InlineKeyboardButton(self.get_text(user_id, 'main_menu'), callback_data="back_to_main")]
            ]
        else:
            # –ê—á–∏–≤–∫–∞ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            await self.check_specific_followers(query, wallet_index, wallet_address)
    
    async def handle_followers_continue(self, query, wallet_index: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        user_id = query.from_user.id
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–º–æ—â–∏ –¥—Ä—É–≥–∏–º
        available_wallets = self.data_manager.get_random_wallets(5)
        
        if available_wallets:
            links_text = "\n".join([f"‚Ä¢ <a href=\"https://phi.box/profile/{wallet}\">{wallet}</a>" for wallet in available_wallets])
            message = self.get_text(user_id, 'help_others_followers', links=links_text)
            
            keyboard = [
                [InlineKeyboardButton(self.get_text(user_id, 'main_menu'), callback_data="back_to_main")]
            ]
        else:
            message = self.get_text(user_id, 'no_available_addresses')
            
            keyboard = [
                [InlineKeyboardButton(self.get_text(user_id, 'main_menu'), callback_data="back_to_main")]
            ]
        
        await query.edit_message_text(
            text=message,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard),
            disable_web_page_preview=True
        )
    
    async def handle_token_refresh(self, query, wallet_index: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤"""
        user_id = query.from_user.id
        user_data = self.users_data.get(user_id, UserData([], []))
        
        if wallet_index >= len(user_data.wallet_addresses):
            await query.edit_message_text(self.get_text(user_id, 'error_wallet_index'))
            return
        
        wallet_address = user_data.wallet_addresses[wallet_index]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫—É —Å–Ω–æ–≤–∞
        achievement = self.api_client.get_token_holders_achievement(wallet_address)
        
        if not achievement or achievement['completed']:
            await self.handle_token_wallet_selection(query, wallet_index)
            return
        
        remaining = achievement['remaining']
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏
        token_links = self.generate_token_links(remaining, wallet_address, user_id)
        
        if token_links:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            target_board_ids = self.extract_board_ids_from_links(token_links)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in self.users_data:
                self.users_data[user_id] = UserData([], [])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.users_data[user_id]
            if not hasattr(user_data, 'token_targets'):
                user_data.token_targets = {}
            if not hasattr(user_data, 'token_user_wallet'):
                user_data.token_user_wallet = {}
            
            user_data.token_targets[wallet_index] = target_board_ids
            user_data.token_user_wallet[wallet_index] = wallet_address
            self.save_users_data()
            
            links_text = "\n".join([f"‚Ä¢ {link}" for link in token_links])
            message = self.get_text(user_id, 'refresh_links_tokens', remaining=remaining, links=links_text)
            
            keyboard = [
                [InlineKeyboardButton(self.get_text(user_id, 'refresh'), callback_data=f"token_refresh_{wallet_index}")],
                [InlineKeyboardButton(self.get_text(user_id, 'done'), callback_data=f"token_done_{wallet_index}")],
                [InlineKeyboardButton(self.get_text(user_id, 'cancel'), callback_data="token_holders")]
            ]
        else:
            message = self.get_text(user_id, 'insufficient_tokens_system')
            
            keyboard = [
                [InlineKeyboardButton(self.get_text(user_id, 'back'), callback_data="token_holders")]
            ]
        
        await query.edit_message_text(
            text=message,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard),
            disable_web_page_preview=True
        )
    
    async def handle_token_done(self, query, wallet_index: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
        user_id = query.from_user.id
        user_data = self.users_data.get(user_id, UserData([], []))
        
        if wallet_index >= len(user_data.wallet_addresses):
            await query.edit_message_text(self.get_text(user_id, 'error_wallet_index'))
            return
        
        wallet_address = user_data.wallet_addresses[wallet_index]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫—É —Å–Ω–æ–≤–∞
        achievement = self.api_client.get_token_holders_achievement(wallet_address)
        
        if not achievement:
            message = self.get_text(user_id, 'error_achievement_check_general')
            
            keyboard = [
                [InlineKeyboardButton(self.get_text(user_id, 'back'), callback_data="token_holders")]
            ]
        elif achievement['completed']:
            # –ê—á–∏–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥—Ä–µ—Å –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
            is_in_global_list = wallet_address in self.data_manager.read_wallets()
            
            if not is_in_global_list:
                self.add_wallet_to_global_list(wallet_address)
                message = self.get_text(user_id, 'achievement_success',
                                      achievement_name="They Lovin' It", wallet_address=wallet_address,
                                      completed_tasks=user_data.completed_token_tasks)
            else:
                message = self.get_text(user_id, 'achievement_success_simple',
                                      achievement_name="They Lovin' It", wallet_address=wallet_address,
                                      completed_tasks=user_data.completed_token_tasks)
            
            user_data.completed_token_tasks += 1
            self.save_users_data()
            
            keyboard = [
                [InlineKeyboardButton(self.get_text(user_id, 'main_menu'), callback_data="back_to_main")]
            ]
        else:
            # –ê—á–∏–≤–∫–∞ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
            await self.check_specific_token_purchases(query, wallet_index, wallet_address)
    
    async def handle_token_continue(self, query, wallet_index: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ç–æ–∫–µ–Ω–∞–º–∏"""
        user_id = query.from_user.id
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ–º–æ—â–∏ –¥—Ä—É–≥–∏–º
        available_tokens = self.data_manager.get_random_tokens(5)
        
        if available_tokens:
            links_text = "\n".join([f"‚Ä¢ <a href=\"https://phi.box/board/{board_id}\">{board_id}</a>" for board_id in available_tokens])
            message = self.get_text(user_id, 'help_others_tokens', links=links_text)
            
            keyboard = [
                [InlineKeyboardButton(self.get_text(user_id, 'main_menu'), callback_data="back_to_main")]
            ]
        else:
            message = self.get_text(user_id, 'no_available_tokens')
            
            keyboard = [
                [InlineKeyboardButton(self.get_text(user_id, 'main_menu'), callback_data="back_to_main")]
            ]
        
        await query.edit_message_text(
            text=message,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard),
            disable_web_page_preview=True
        )
    
    async def check_specific_token_purchases(self, query, wallet_index: int, user_wallet: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        user_id = query.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        user_data = self.users_data.get(user_id, UserData([], []))
        target_board_ids = getattr(user_data, 'token_targets', {}).get(wallet_index, [])
        
        if not target_board_ids:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫—É
            achievement = self.api_client.get_token_holders_achievement(user_wallet)
            if not achievement:
                message = self.get_text(user_id, 'error_achievement_check_general')
                
                keyboard = [
                    [InlineKeyboardButton(self.get_text(user_id, 'back'), callback_data="token_holders")]
                ]
            else:
                remaining = achievement['remaining']
                message = self.get_text(user_id, 'achievement_not_completed', 
                                      remaining=remaining, type=self.get_text(user_id, 'holders_type'))
                
                keyboard = [
                    [InlineKeyboardButton(self.get_text(user_id, 'refresh'), callback_data=f"token_done_{wallet_index}")],
                    [InlineKeyboardButton(self.get_text(user_id, 'back'), callback_data="token_holders")]
                ]
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ API
            await query.edit_message_text(self.get_text(user_id, 'checking_purchases'))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω
            purchase_results = self.api_client.check_multiple_token_purchases(target_board_ids, user_wallet)
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –∏ –Ω–µ–∫—É–ø–ª–µ–Ω–Ω—ã–µ
            purchased = [board_id for board_id, is_purchased in purchase_results.items() if is_purchased]
            not_purchased = [board_id for board_id, is_purchased in purchase_results.items() if not is_purchased]
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∫—É–ø–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            if not purchased and not_purchased:
                if self.background_checker:
                    self.background_checker.add_pending_check(
                        user_id=user_id,
                        wallet_index=wallet_index,
                        wallet_address=user_wallet,
                        check_type="tokens",
                        target_board_ids=target_board_ids
                    )
                
                message = self.get_text(user_id, 'data_not_updated', count=len(target_board_ids))
                
                keyboard = [
                    [InlineKeyboardButton(self.get_text(user_id, 'refresh'), callback_data=f"token_done_{wallet_index}")],
                    [InlineKeyboardButton(self.get_text(user_id, 'back'), callback_data="token_holders")]
                ]
                
                await query.edit_message_text(
                    text=message,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    disable_web_page_preview=True
                )
                return
            
            if not not_purchased:
                # –í—Å–µ –ø–æ–∫—É–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
                user_data = self.users_data.get(user_id, UserData([], []))
                user_data.completed_token_tasks += len(purchased)
                self.save_users_data()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫—É –µ—â–µ —Ä–∞–∑
                achievement = self.api_client.get_token_holders_achievement(user_wallet)
                if achievement and achievement['completed']:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥—Ä–µ—Å –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
                    is_in_global_list = user_wallet in self.data_manager.read_wallets()
                    if not is_in_global_list:
                        self.add_wallet_to_global_list(user_wallet)
                        message = self.get_text(user_id, 'achievement_success',
                                              achievement_name="They Lovin' It", wallet_address=user_wallet,
                                              completed_tasks=user_data.completed_token_tasks)
                    else:
                        message = self.get_text(user_id, 'achievement_success_simple',
                                              achievement_name="They Lovin' It", wallet_address=user_wallet,
                                              completed_tasks=user_data.completed_token_tasks)
                    
                    keyboard = [
                        [InlineKeyboardButton(self.get_text(user_id, 'main_menu'), callback_data="back_to_main")]
                    ]
                else:
                    message = self.get_text(user_id, 'all_purchases_complete', 
                                          count=len(purchased), completed_tasks=user_data.completed_token_tasks)
                    
                    keyboard = [
                        [InlineKeyboardButton(self.get_text(user_id, 'main_menu'), callback_data="back_to_main")]
                    ]
            else:
                # –ï—Å—Ç—å –Ω–µ–∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
                not_purchased_links = [f'<a href="https://phi.box/board/{board_id}?referrer={user_wallet}">{board_id}</a>' for board_id in not_purchased]
                links_text = "\n".join([f"‚Ä¢ {link}" for link in not_purchased_links])
                
                message = self.get_text(user_id, 'not_all_purchases', 
                                      purchased=len(purchased), total=len(target_board_ids), links=links_text)
                
                keyboard = [
                    [InlineKeyboardButton(self.get_text(user_id, 'done'), callback_data=f"token_done_{wallet_index}")],
                    [InlineKeyboardButton(self.get_text(user_id, 'back'), callback_data="token_holders")]
                ]
        
        await query.edit_message_text(
            text=message,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard),
            disable_web_page_preview=True
        )
    
    async def check_specific_followers(self, query, wallet_index: int, user_wallet: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = query.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        user_data = self.users_data.get(user_id, UserData([], []))
        target_addresses = getattr(user_data, 'followers_targets', {}).get(wallet_index, [])
        
        if not target_addresses:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫—É
            achievement = self.api_client.get_trendsetter_achievement(user_wallet)
            if not achievement:
                message = self.get_text(user_id, 'error_achievement_check_general')
                
                keyboard = [
                    [InlineKeyboardButton(self.get_text(user_id, 'back'), callback_data="followers")]
                ]
            else:
                remaining = achievement['remaining']
                message = self.get_text(user_id, 'achievement_not_completed', 
                                      remaining=remaining, type=self.get_text(user_id, 'followers_type'))
                
                keyboard = [
                    [InlineKeyboardButton(self.get_text(user_id, 'refresh'), callback_data=f"followers_done_{wallet_index}")],
                    [InlineKeyboardButton(self.get_text(user_id, 'back'), callback_data="followers")]
                ]
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ API
            await query.edit_message_text(self.get_text(user_id, 'checking_followers'))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∞–¥—Ä–µ—Å
            follow_results = self.api_client.check_multiple_followers(target_addresses, user_wallet)
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –∏ –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ
            followed = [addr for addr, is_following in follow_results.items() if is_following]
            not_followed = [addr for addr, is_following in follow_results.items() if not is_following]
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∏ –Ω–∞ –∫–æ–≥–æ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            if not followed and not_followed:
                if self.background_checker:
                    self.background_checker.add_pending_check(
                        user_id=user_id,
                        wallet_index=wallet_index,
                        wallet_address=user_wallet,
                        check_type="followers",
                        target_addresses=target_addresses
                    )
                
                message = self.get_text(user_id, 'data_not_updated_followers', count=len(target_addresses))
                
                keyboard = [
                    [InlineKeyboardButton(self.get_text(user_id, 'refresh'), callback_data=f"followers_done_{wallet_index}")],
                    [InlineKeyboardButton(self.get_text(user_id, 'back'), callback_data="followers")]
                ]
                
                await query.edit_message_text(
                    text=message,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    disable_web_page_preview=True
                )
                return
            
            if not not_followed:
                # –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
                user_data = self.users_data.get(user_id, UserData([], []))
                user_data.completed_followers_tasks += len(followed)
                self.save_users_data()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫—É –µ—â–µ —Ä–∞–∑
                achievement = self.api_client.get_trendsetter_achievement(user_wallet)
                if achievement and achievement['completed']:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥—Ä–µ—Å –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
                    is_in_global_list = user_wallet in self.data_manager.read_wallets()
                    if not is_in_global_list:
                        self.add_wallet_to_global_list(user_wallet)
                        message = self.get_text(user_id, 'achievement_success',
                                              achievement_name='Trendsetter', wallet_address=user_wallet,
                                              completed_tasks=user_data.completed_followers_tasks)
                    else:
                        message = self.get_text(user_id, 'achievement_success_simple',
                                              achievement_name='Trendsetter', wallet_address=user_wallet,
                                              completed_tasks=user_data.completed_followers_tasks)
                    
                    keyboard = [
                        [InlineKeyboardButton(self.get_text(user_id, 'main_menu'), callback_data="back_to_main")]
                    ]
                else:
                    message = self.get_text(user_id, 'all_followers_complete', 
                                          count=len(followed), completed_tasks=user_data.completed_followers_tasks)
                    
                    keyboard = [
                        [InlineKeyboardButton(self.get_text(user_id, 'main_menu'), callback_data="back_to_main")]
                    ]
            else:
                # –ï—Å—Ç—å –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                not_followed_links = [f'<a href="https://phi.box/profile/{addr}">{addr}</a>' for addr in not_followed]
                links_text = "\n".join([f"‚Ä¢ {link}" for link in not_followed_links])
                
                message = self.get_text(user_id, 'not_all_followers', 
                                      followed=len(followed), total=len(target_addresses), links=links_text)
                
                keyboard = [
                    [InlineKeyboardButton(self.get_text(user_id, 'done'), callback_data=f"followers_done_{wallet_index}")],
                    [InlineKeyboardButton(self.get_text(user_id, 'refresh'), callback_data=f"followers_done_{wallet_index}")],
                    [InlineKeyboardButton(self.get_text(user_id, 'back'), callback_data="followers")]
                ]
        
        await query.edit_message_text(
            text=message,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard),
            disable_web_page_preview=True
        )
    
    def add_wallet_to_global_list(self, wallet_address: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–¥—Ä–µ—Å –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤"""
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
            current_wallets = self.data_manager.read_wallets()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if wallet_address not in current_wallets:
                current_wallets.append(wallet_address)
                self.data_manager.write_wallets(current_wallets)
                print(f"–ê–¥—Ä–µ—Å {wallet_address} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫: {e}")
    
    def is_achievement_notification_sent(self, user_id: int, wallet_address: str, achievement_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—á–∏–≤–∫–∏"""
        user_data = self.users_data.get(user_id)
        if not user_data or not user_data.sent_achievement_notifications:
            return False
        
        achievement_notifications = user_data.sent_achievement_notifications.get(achievement_name, [])
        return wallet_address in achievement_notifications
    
    def mark_achievement_notification_sent(self, user_id: int, wallet_address: str, achievement_name: str):
        """–û—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—á–∏–≤–∫–∏ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"""
        user_data = self.users_data.get(user_id)
        if not user_data:
            return
        
        if not user_data.sent_achievement_notifications:
            user_data.sent_achievement_notifications = {}
        
        if achievement_name not in user_data.sent_achievement_notifications:
            user_data.sent_achievement_notifications[achievement_name] = []
        
        if wallet_address not in user_data.sent_achievement_notifications[achievement_name]:
            user_data.sent_achievement_notifications[achievement_name].append(wallet_address)
            self.save_users_data()
    
    def clear_achievement_notifications(self, user_id: int, achievement_name: str = None):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—á–∏–≤–æ–∫"""
        user_data = self.users_data.get(user_id)
        if not user_data:
            return
        
        if not user_data.sent_achievement_notifications:
            return
        
        if achievement_name:
            # –û—á–∏—â–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞—á–∏–≤–∫–∏
            if achievement_name in user_data.sent_achievement_notifications:
                del user_data.sent_achievement_notifications[achievement_name]
        else:
            # –û—á–∏—â–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            user_data.sent_achievement_notifications = {}
        
        self.save_users_data()
        print(f"–û—á–∏—â–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—á–∏–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    def cleanup_completed_achievements(self):
        """–û—á–∏—â–∞–µ—Ç —Ñ–∞–π–ª—ã –æ—Ç –∞–¥—Ä–µ—Å–æ–≤ –∏ —Ç–æ–∫–µ–Ω–æ–≤ —Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –∞—á–∏–≤–∫–∞–º–∏"""
        print("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–æ–≤ –æ—Ç –∞–¥—Ä–µ—Å–æ–≤ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –∞—á–∏–≤–∫–∞–º–∏...")
        
        # –û—á–∏—â–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏
        wallets = self.data_manager.read_wallets()
        wallets_to_remove = []
        
        print(f"üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(wallets)} –∫–æ—à–µ–ª—å–∫–æ–≤...")
        
        for wallet in wallets:
            achievement = self.api_client.get_trendsetter_achievement(wallet)
            if achievement and achievement['completed']:
                print(f"   ‚ùå –£–¥–∞–ª—è–µ–º {wallet[:10]}... (–∞—á–∏–≤–∫–∞ Trendsetter –ø–æ–ª—É—á–µ–Ω–∞ - 10+ —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤)")
                wallets_to_remove.append(wallet)
        
        for wallet in wallets_to_remove:
            self.data_manager.remove_wallet(wallet)
        
        if wallets_to_remove:
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {len(wallets_to_remove)} –∫–æ—à–µ–ª—å–∫–æ–≤ –∏–∑ wallets.txt")
        
        # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã
        tokens = self.data_manager.read_tokens()
        tokens_to_remove = []
        
        print(f"üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(tokens)} —Ç–æ–∫–µ–Ω–æ–≤...")
        
        for board_id in tokens:
            holders_count = self.api_client.get_token_holders_count(board_id)
            if holders_count is not None and holders_count >= 10:
                print(f"   ‚ùå –£–¥–∞–ª—è–µ–º {board_id[:10]}... ({holders_count} —Ö–æ–ª–¥–µ—Ä–æ–≤)")
                tokens_to_remove.append(board_id)
        
        for board_id in tokens_to_remove:
            self.data_manager.remove_token(board_id)
        
        if tokens_to_remove:
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {len(tokens_to_remove)} —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ tokens.txt")
        
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    def extract_addresses_from_links(self, links: List[str]) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–¥—Ä–µ—Å–∞ –∏–∑ HTML-—Å—Å—ã–ª–æ–∫ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏"""
        addresses = []
        for link in links:
            if "phi.box/profile/" in link:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å –∏–∑ HTML-—Å—Å—ã–ª–∫–∏ –≤–∏–¥–∞ <a href="https://phi.box/profile/{address}">{address}</a>
                address = link.split("phi.box/profile/")[-1].split('"')[0]
                if self.is_valid_ethereum_address(address):
                    addresses.append(address)
        return addresses
    
    def extract_board_ids_from_links(self, links: List[str]) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –±–æ—Ä–¥–æ–≤ –∏–∑ HTML-—Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–æ–∫–µ–Ω—ã"""
        board_ids = []
        for link in links:
            if "phi.box/board/" in link:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –±–æ—Ä–¥–∞ –∏–∑ HTML-—Å—Å—ã–ª–∫–∏ –≤–∏–¥–∞ <a href="https://phi.box/board/{board_id}?referrer={wallet}">{board_id}</a>
                board_part = link.split("phi.box/board/")[-1].split('"')[0]
                board_id = board_part.split("?")[0]  # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ ?
                if self.extract_board_id(board_id):
                    board_ids.append(board_id)
        return board_ids
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        text = update.message.text.strip()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫–æ–º —Ä–µ–∂–∏–º–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤" in context.user_data.get('mode', ''):
            await self.process_wallet_addresses(update, context, text)
        elif "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ä–¥–æ–≤" in context.user_data.get('mode', ''):
            await self.process_board_addresses(update, context, text)
    
    async def process_wallet_addresses(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤"""
        user_id = update.effective_user.id
        addresses = [addr.strip() for addr in text.split('\n') if addr.strip()]
        
        valid_addresses = []
        invalid_addresses = []
        
        for address in addresses:
            if self.is_valid_ethereum_address(address):
                valid_addresses.append(address)
            else:
                invalid_addresses.append(address)
        
        if valid_addresses:
            if user_id not in self.users_data:
                self.users_data[user_id] = UserData([], [])
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞
            for address in valid_addresses:
                if address not in self.users_data[user_id].wallet_addresses:
                    self.users_data[user_id].wallet_addresses.append(address)
            
            self.save_users_data()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Ñ–∞–π–ª –∫–æ—à–µ–ª—å–∫–æ–≤
            self.update_wallets_file()
        
        message = self.get_text(user_id, 'processing_complete', 
                               valid_count=len(valid_addresses),
                               invalid_count=len(invalid_addresses))
        
        if invalid_addresses:
            message += "\n\n" + self.get_text(user_id, 'invalid_addresses', addresses="\n".join(invalid_addresses))
        
        keyboard = [
            [InlineKeyboardButton(self.get_text(user_id, 'back_to_data'), callback_data="my_data")]
        ]
        
        await update.message.reply_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
        context.user_data['mode'] = ''
    
    async def process_board_addresses(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ä–¥–æ–≤"""
        user_id = update.effective_user.id
        boards = [board.strip() for board in text.split('\n') if board.strip()]
        
        valid_boards = []
        invalid_boards = []
        
        for board in boards:
            board_id = self.extract_board_id(board)
            if board_id:
                valid_boards.append(board_id)
            else:
                invalid_boards.append(board)
        
        if valid_boards:
            if user_id not in self.users_data:
                self.users_data[user_id] = UserData([], [])
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –±–æ—Ä–¥—ã
            for board_id in valid_boards:
                if board_id not in self.users_data[user_id].board_addresses:
                    self.users_data[user_id].board_addresses.append(board_id)
            
            self.save_users_data()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ —Ñ–∞–π–ª—ã
            self.update_boards_file()
            self.update_tokens_file()
        
        message = self.get_text(user_id, 'processing_complete_boards', 
                               valid_count=len(valid_boards),
                               invalid_count=len(invalid_boards))
        
        if invalid_boards:
            message += "\n\n" + self.get_text(user_id, 'invalid_boards', boards="\n".join(invalid_boards))
        
        keyboard = [
            [InlineKeyboardButton(self.get_text(user_id, 'back_to_data'), callback_data="my_data")]
        ]
        
        await update.message.reply_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
        context.user_data['mode'] = ''
    
    def update_wallets_file(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—â–∏–π —Ñ–∞–π–ª –∫–æ—à–µ–ª—å–∫–æ–≤"""
        all_wallets = set()
        for user_data in self.users_data.values():
            all_wallets.update(user_data.wallet_addresses)
        
        self.data_manager.write_wallets(list(all_wallets))
    
    def update_boards_file(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—â–∏–π —Ñ–∞–π–ª –±–æ—Ä–¥–æ–≤"""
        all_boards = set()
        for user_data in self.users_data.values():
            all_boards.update(user_data.board_addresses)
        
        self.data_manager.write_boards(list(all_boards))
    
    def update_tokens_file(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—â–∏–π —Ñ–∞–π–ª —Ç–æ–∫–µ–Ω–æ–≤"""
        all_tokens = set()
        for user_data in self.users_data.values():
            for board in user_data.board_addresses:
                all_tokens.add(board)
        
        self.data_manager.write_tokens(list(all_tokens))
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        if not self.bot_token:
            print("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(self.bot_token).build()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.background_checker = BackgroundChecker(self)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("language", self.language_command))
        self.application.add_handler(CommandHandler("my", self.my_data_command))
        self.application.add_handler(CommandHandler("trendsetter", self.trendsetter_command))
        self.application.add_handler(CommandHandler("tokens", self.tokens_command))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        import asyncio
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        background_task = loop.create_task(self.background_checker.start_background_checking())
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
        loop.run_until_complete(self.set_bot_commands())
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            self.application.run_polling()
        except KeyboardInterrupt:
            print("\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            self.background_checker.stop_background_checking()
            background_task.cancel()
            loop.close()

if __name__ == "__main__":
    bot = PHIBot()
    bot.run()
