import os
import random
from typing import List, Set, Tuple

class DataManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, wallets_file: str = 'wallets.txt', 
                 boards_file: str = 'boards.txt', 
                 tokens_file: str = 'tokens.txt'):
        self.wallets_file = wallets_file
        self.boards_file = boards_file
        self.tokens_file = tokens_file
    
    def _safe_comparison(self, value: any, threshold: int, operation: str = ">=") -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ None"""
        if value is None:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø–æ–ø—ã—Ç–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è None —Å {threshold}")
            return False
        
        try:
            if operation == ">=":
                return value >= threshold
            elif operation == ">":
                return value > threshold
            elif operation == "<=":
                return value <= threshold
            elif operation == "<":
                return value < threshold
            elif operation == "==":
                return value == threshold
            else:
                print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {operation}")
                return False
        except TypeError as e:
            print(f"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è {value} {operation} {threshold}: {e}")
            return False
    
    def read_wallets(self) -> List[str]:
        """–ß–∏—Ç–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if not os.path.exists(self.wallets_file):
                return []
            
            with open(self.wallets_file, 'r', encoding='utf-8') as f:
                wallets = []
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#'):
                        wallets.append(line)
                return wallets
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–æ—à–µ–ª—å–∫–æ–≤: {e}")
            return []
    
    def read_boards(self) -> List[str]:
        """–ß–∏—Ç–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–æ—Ä–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if not os.path.exists(self.boards_file):
                return []
            
            with open(self.boards_file, 'r', encoding='utf-8') as f:
                boards = []
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#'):
                        boards.append(line)
                return boards
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –±–æ—Ä–¥–æ–≤: {e}")
            return []
    
    def read_tokens(self) -> List[str]:
        """–ß–∏—Ç–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ ID –±–æ—Ä–¥–æ–≤)"""
        try:
            print(f"üìÅ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Ç–æ–∫–µ–Ω–æ–≤: {self.tokens_file}")
            
            if not os.path.exists(self.tokens_file):
                print(f"‚ùå –§–∞–π–ª —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {self.tokens_file}")
                return []
            
            tokens = []
            with open(self.tokens_file, 'r', encoding='utf-8') as f:
                for line_num, line in enumerate(f, 1):
                    original_line = line
                    line = line.strip()
                    print(f"üìÑ –°—Ç—Ä–æ–∫–∞ {line_num}: '{original_line.strip()}' -> '{line}'")
                    
                    if line and not line.startswith('#'):
                        # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç URL, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞
                        if 'phi.box/board/' in line:
                            board_id = line.split('phi.box/board/')[-1].split('?')[0]
                            tokens.append(board_id)
                            print(f"üßπ –û—á–∏—â–µ–Ω —Ç–æ–∫–µ–Ω: '{line}' -> '{board_id}'")
                        else:
                            tokens.append(line)
                            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω: '{line}'")
                    else:
                        print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞: '{line}'")
            
            print(f"üìã –ò—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(tokens)}")
            print(f"üìã –¢–æ–∫–µ–Ω—ã: {tokens}")
            return tokens
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
            import traceback
            traceback.print_exc()
            return []
    
    def write_wallets(self, wallets: List[str]):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.wallets_file, 'w', encoding='utf-8') as f:
                f.write("# –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n")
                f.write("# –ö–∞–∂–¥—ã–π –∞–¥—Ä–µ—Å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ\n")
                f.write("# –§–æ—Ä–º–∞—Ç: 0x...\n\n")
                for wallet in sorted(set(wallets)):
                    f.write(f"{wallet}\n")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ –∫–æ—à–µ–ª—å–∫–æ–≤: {e}")
    
    def write_boards(self, boards: List[str]):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–æ—Ä–¥–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.boards_file, 'w', encoding='utf-8') as f:
                f.write("# –°–ø–∏—Å–æ–∫ –±–æ—Ä–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n")
                f.write("# –ö–∞–∂–¥—ã–π –±–æ—Ä–¥ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ\n")
                f.write("# –§–æ—Ä–º–∞—Ç: UUID –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ phi.box/board/\n\n")
                for board in sorted(set(boards)):
                    f.write(f"{board}\n")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ –±–æ—Ä–¥–æ–≤: {e}")
    
    def write_tokens(self, tokens: List[str]):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.tokens_file, 'w', encoding='utf-8') as f:
                f.write("# –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n")
                f.write("# –§–æ—Ä–º–∞—Ç: board_id\n")
                f.write("# –ö–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ\n\n")
                for board_id in sorted(set(tokens)):
                    # –û—á–∏—â–∞–µ–º board_id –æ—Ç URL –µ—Å–ª–∏ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É
                    clean_board_id = board_id
                    if 'phi.box/board/' in board_id:
                        clean_board_id = board_id.split('phi.box/board/')[-1].split('?')[0]
                    f.write(f"{clean_board_id}\n")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
    
    def remove_wallet(self, wallet: str):
        """–£–¥–∞–ª—è–µ—Ç –∫–æ—à–µ–ª–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            wallets = self.read_wallets()
            if wallet in wallets:
                wallets.remove(wallet)
                self.write_wallets(wallets)
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –∫–æ—à–µ–ª–µ–∫: {wallet}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: {e}")
    
    def remove_token(self, token: str):
        """–£–¥–∞–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            tokens = self.read_tokens()
            if token in tokens:
                tokens.remove(token)
                self.write_tokens(tokens)
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ç–æ–∫–µ–Ω: {token}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
    
    def get_random_wallets(self, count: int, exclude: Set[str] = None) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        wallets = self.read_wallets()
        if exclude:
            wallets = [w for w in wallets if w not in exclude]
        
        if len(wallets) <= count:
            return wallets
        
        return random.sample(wallets, count)
    
    def get_random_tokens(self, count: int, exclude_boards: Set[str] = None) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞"""
        print(f"üé≤ get_random_tokens: –Ω—É–∂–Ω–æ {count}, –∏—Å–∫–ª—é—á–∏—Ç—å {exclude_boards}")
        
        tokens = self.read_tokens()
        print(f"üìÅ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {len(tokens)}")
        print(f"üìã –¢–æ–∫–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞: {tokens}")
        
        if exclude_boards:
            print(f"üö´ –ò—Å–∫–ª—é—á–∞–µ–º –±–æ—Ä–¥—ã: {exclude_boards}")
            # –û—á–∏—â–∞–µ–º exclude_boards –æ—Ç URL –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            clean_exclude_boards = set()
            for board in exclude_boards:
                if 'phi.box/board/' in board:
                    clean_board = board.split('phi.box/board/')[-1].split('?')[0]
                    clean_exclude_boards.add(clean_board)
                    print(f"üßπ –û—á–∏—â–µ–Ω –∏—Å–∫–ª—é—á–∞–µ–º—ã–π –±–æ—Ä–¥: {board} -> {clean_board}")
                else:
                    clean_exclude_boards.add(board)
            
            print(f"üö´ –û—á–∏—â–µ–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ –±–æ—Ä–¥—ã: {clean_exclude_boards}")
            tokens = [t for t in tokens if t not in clean_exclude_boards]
            print(f"üìã –¢–æ–∫–µ–Ω—ã –ø–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {len(tokens)}")
            print(f"üìã –¢–æ–∫–µ–Ω—ã –ø–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {tokens}")
        
        if len(tokens) <= count:
            print(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã: {len(tokens)}")
            return tokens
        
        result = random.sample(tokens, count)
        print(f"üé≤ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {len(result)}")
        print(f"üìã –°–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {result}")
        return result
    
    def remove_wallet_if_completed(self, wallet: str, achievement_type: str, threshold: int, api_client):
        """
        –£–¥–∞–ª—è–µ—Ç –∫–æ—à–µ–ª–µ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –µ—Å–ª–∏ –∞—á–∏–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        
        Args:
            wallet: –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
            achievement_type: –¢–∏–ø –∞—á–∏–≤–∫–∏ ('followers' –∏–ª–∏ 'token_holders')
            threshold: –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∞—á–∏–≤–∫–∏
            api_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
        """
        try:
            if achievement_type == 'followers':
                current_count = api_client.get_followers_count(wallet)
            elif achievement_type == 'token_holders':
                # –î–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –±–æ—Ä–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω
                return
            else:
                return
            
            if current_count is not None and current_count >= threshold:
                # –£–¥–∞–ª—è–µ–º –∫–æ—à–µ–ª–µ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞
                wallets = self.read_wallets()
                if wallet in wallets:
                    wallets.remove(wallet)
                    self.write_wallets(wallets)
                    print(f"–ö–æ—à–µ–ª–µ–∫ {wallet} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ (–∞—á–∏–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞)")
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: {e}")
    
    def remove_token_if_completed(self, wallet: str, board: str, threshold: int, api_client):
        """
        –£–¥–∞–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –µ—Å–ª–∏ –∞—á–∏–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        
        Args:
            wallet: –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
            board: ID –±–æ—Ä–¥–∞
            threshold: –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∞—á–∏–≤–∫–∏
            api_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
        """
        try:
            current_count = api_client.get_token_holders_count(wallet, board)
            
            if current_count is not None and current_count >= threshold:
                # –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞
                tokens = self.read_tokens()
                token_to_remove = (wallet, board)
                if token_to_remove in tokens:
                    tokens.remove(token_to_remove)
                    self.write_tokens(tokens)
                    print(f"–¢–æ–∫–µ–Ω {wallet}:{board} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ (–∞—á–∏–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞)")
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
    
    def remove_tokens_with_many_holders(self, api_client, threshold: int = 10):
        """
        –£–¥–∞–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ö–æ–ª–¥–µ—Ä–æ–≤ >= threshold
        
        Args:
            api_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
            threshold: –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ö–æ–ª–¥–µ—Ä–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
        """
        try:
            tokens = self.read_tokens()
            tokens_to_keep = []
            
            for board_id in tokens:
                # –û—á–∏—â–∞–µ–º board_id –æ—Ç URL –µ—Å–ª–∏ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É
                clean_board_id = board_id
                if 'phi.box/board/' in board_id:
                    clean_board_id = board_id.split('phi.box/board/')[-1].split('?')[0]
                
                holders_count = api_client.get_token_holders_count(clean_board_id)
                if holders_count == 0:
                    print(f"üö´ –¢–æ–∫–µ–Ω {clean_board_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ (0 —Ö–æ–ª–¥–µ—Ä–æ–≤ - –Ω–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å)")
                elif self._safe_comparison(holders_count, threshold, "<"):
                    tokens_to_keep.append(clean_board_id)
                elif self._safe_comparison(holders_count, threshold, ">="):
                    print(f"‚úÖ –¢–æ–∫–µ–Ω {clean_board_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ ({holders_count} —Ö–æ–ª–¥–µ—Ä–æ–≤ - ‚â•{threshold})")
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–ø–∏—Å–∫–µ
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ö–æ–ª–¥–µ—Ä–æ–≤ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {clean_board_id} - –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–∫–µ")
                    tokens_to_keep.append(clean_board_id)
            
            if len(tokens_to_keep) != len(tokens):
                self.write_tokens(tokens_to_keep)
                print(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤: {len(tokens_to_keep)} –∏–∑ {len(tokens)}")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ö–æ–ª–¥–µ—Ä–æ–≤: {e}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    dm = DataManager()
    
    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    wallets = dm.read_wallets()
    boards = dm.read_boards()
    tokens = dm.read_tokens()
    
    print(f"–ö–æ—à–µ–ª—å–∫–æ–≤: {len(wallets)}")
    print(f"–ë–æ—Ä–¥–æ–≤: {len(boards)}")
    print(f"–¢–æ–∫–µ–Ω–æ–≤: {len(tokens)}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
    random_wallets = dm.get_random_wallets(3)
    print(f"–°–ª—É—á–∞–π–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏: {random_wallets}")
